
HapticHandsV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006278  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b0  080064b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b6c  20000010  080064c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b7c  080064c8  00024b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e45  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003022  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00039ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001019  00000000  00000000  0003b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003014  00000000  00000000  0003c3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016710  00000000  00000000  0003f3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a39dc  00000000  00000000  00055ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057c4  00000000  00000000  000f94a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006400 	.word	0x08006400

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006400 	.word	0x08006400

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <__NVIC_SetPriorityGrouping+0x44>)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	60d3      	str	r3, [r2, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 ff6a 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f83a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fbb0 	bl	8000c94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000534:	f000 f894 	bl	8000660 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000538:	f000 f8e4 	bl	8000704 <MX_TIM1_Init>
  MX_TIM2_Init();
 800053c:	f000 f98a 	bl	8000854 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000540:	f000 fa04 	bl	800094c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000544:	f000 fa80 	bl	8000a48 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000548:	f000 fafc 	bl	8000b44 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800054c:	f000 fb78 	bl	8000c40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize NVIC Priority group
  // Required for proper priority control between tasks and interrupts
  // See configASSERT in port.c for more info
  NVIC_SetPriorityGrouping(0);
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff ffc3 	bl	80004dc <__NVIC_SetPriorityGrouping>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000556:	213c      	movs	r1, #60	; 0x3c
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <main+0x64>)
 800055a:	f002 fa10 	bl	800297e <HAL_TIM_Encoder_Start>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//  TIM1->CCR3 = 32000;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055e:	f003 f947 	bl	80037f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <main+0x68>)
 8000564:	2100      	movs	r1, #0
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x6c>)
 8000568:	f003 f98c 	bl	8003884 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <main+0x70>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of readEncoder */
  readEncoderHandle = osThreadNew(ReadEncoder, NULL, &readEncoder_attributes);
 8000572:	4a09      	ldr	r2, [pc, #36]	; (8000598 <main+0x74>)
 8000574:	2100      	movs	r1, #0
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x78>)
 8000578:	f003 f984 	bl	8003884 <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <main+0x7c>)
 8000580:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000582:	f003 f959 	bl	8003838 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x62>
 8000588:	20000074 	.word	0x20000074
 800058c:	08006448 	.word	0x08006448
 8000590:	08000d69 	.word	0x08000d69
 8000594:	20000220 	.word	0x20000220
 8000598:	0800646c 	.word	0x0800646c
 800059c:	08000d79 	.word	0x08000d79
 80005a0:	20000224 	.word	0x20000224

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 feea 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xb4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xb4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xb4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <SystemClock_Config+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <SystemClock_Config+0xb8>)
 80005ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <SystemClock_Config+0xb8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fc5b 	bl	8001ed0 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000620:	f000 fbc2 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 febe 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800064a:	f000 fbad 	bl	8000da8 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c0:	f000 ff10 	bl	80014e4 <HAL_ADC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 fb6d 	bl	8000da8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ce:	2303      	movs	r3, #3
 80006d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e0:	f000 ff44 	bl	800156c <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006ea:	f000 fb5d 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09a      	sub	sp, #104	; 0x68
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 fe3a 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f005 fe25 	bl	800638c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_TIM1_Init+0x148>)
 8000744:	4a42      	ldr	r2, [pc, #264]	; (8000850 <MX_TIM1_Init+0x14c>)
 8000746:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000748:	4b40      	ldr	r3, [pc, #256]	; (800084c <MX_TIM1_Init+0x148>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <MX_TIM1_Init+0x148>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000754:	4b3d      	ldr	r3, [pc, #244]	; (800084c <MX_TIM1_Init+0x148>)
 8000756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800075a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_TIM1_Init+0x148>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <MX_TIM1_Init+0x148>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_TIM1_Init+0x148>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076e:	4837      	ldr	r0, [pc, #220]	; (800084c <MX_TIM1_Init+0x148>)
 8000770:	f002 f806 	bl	8002780 <HAL_TIM_PWM_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800077a:	f000 fb15 	bl	8000da8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800077e:	2301      	movs	r3, #1
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000786:	2301      	movs	r3, #1
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000792:	2300      	movs	r3, #0
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000796:	2301      	movs	r3, #1
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a6:	4619      	mov	r1, r3
 80007a8:	4828      	ldr	r0, [pc, #160]	; (800084c <MX_TIM1_Init+0x148>)
 80007aa:	f002 f838 	bl	800281e <HAL_TIM_Encoder_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80007b4:	f000 faf8 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4821      	ldr	r0, [pc, #132]	; (800084c <MX_TIM1_Init+0x148>)
 80007c8:	f002 fc5c 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80007d2:	f000 fae9 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2208      	movs	r2, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <MX_TIM1_Init+0x148>)
 80007fc:	f002 f94e 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000806:	f000 facf 	bl	8000da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <MX_TIM1_Init+0x148>)
 800082e:	f002 fc97 	bl	8003160 <HAL_TIMEx_ConfigBreakDeadTime>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000838:	f000 fab6 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <MX_TIM1_Init+0x148>)
 800083e:	f000 fc63 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3768      	adds	r7, #104	; 0x68
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000074 	.word	0x20000074
 8000850:	40010000 	.word	0x40010000

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b092      	sub	sp, #72	; 0x48
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	2224      	movs	r2, #36	; 0x24
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fd92 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <MX_TIM2_Init+0xf4>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_TIM2_Init+0xf4>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_TIM2_Init+0xf4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <MX_TIM2_Init+0xf4>)
 800089a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_TIM2_Init+0xf4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_TIM2_Init+0xf4>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ac:	4826      	ldr	r0, [pc, #152]	; (8000948 <MX_TIM2_Init+0xf4>)
 80008ae:	f001 ff67 	bl	8002780 <HAL_TIM_PWM_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008b8:	f000 fa76 	bl	8000da8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008bc:	2303      	movs	r3, #3
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008d4:	2301      	movs	r3, #1
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4818      	ldr	r0, [pc, #96]	; (8000948 <MX_TIM2_Init+0xf4>)
 80008e8:	f001 ff99 	bl	800281e <HAL_TIM_Encoder_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80008f2:	f000 fa59 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <MX_TIM2_Init+0xf4>)
 8000906:	f002 fbbd 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000910:	f000 fa4a 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000914:	2360      	movs	r3, #96	; 0x60
 8000916:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	2208      	movs	r2, #8
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM2_Init+0xf4>)
 800092c:	f002 f8b6 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000936:	f000 fa37 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM2_Init+0xf4>)
 800093c:	f000 fbe4 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000940:	bf00      	nop
 8000942:	3748      	adds	r7, #72	; 0x48
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000bc 	.word	0x200000bc

0800094c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b092      	sub	sp, #72	; 0x48
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	2224      	movs	r2, #36	; 0x24
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f005 fd16 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <MX_TIM3_Init+0xf4>)
 800097e:	4a31      	ldr	r2, [pc, #196]	; (8000a44 <MX_TIM3_Init+0xf8>)
 8000980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_TIM3_Init+0xf4>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_TIM3_Init+0xf4>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_TIM3_Init+0xf4>)
 8000990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_TIM3_Init+0xf4>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099c:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <MX_TIM3_Init+0xf4>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a2:	4827      	ldr	r0, [pc, #156]	; (8000a40 <MX_TIM3_Init+0xf4>)
 80009a4:	f001 feec 	bl	8002780 <HAL_TIM_PWM_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009ae:	f000 f9fb 	bl	8000da8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b2:	2303      	movs	r3, #3
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ca:	2301      	movs	r3, #1
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_TIM3_Init+0xf4>)
 80009de:	f001 ff1e 	bl	800281e <HAL_TIM_Encoder_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009e8:	f000 f9de 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_TIM3_Init+0xf4>)
 80009fc:	f002 fb42 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000a06:	f000 f9cf 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM3_Init+0xf4>)
 8000a22:	f002 f83b 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000a2c:	f000 f9bc 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM3_Init+0xf4>)
 8000a32:	f000 fb69 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3748      	adds	r7, #72	; 0x48
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000104 	.word	0x20000104
 8000a44:	40000400 	.word	0x40000400

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b092      	sub	sp, #72	; 0x48
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	2224      	movs	r2, #36	; 0x24
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fc98 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a7a:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <MX_TIM4_Init+0xf8>)
 8000a7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9e:	4827      	ldr	r0, [pc, #156]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000aa0:	f001 fe6e 	bl	8002780 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000aaa:	f000 f97d 	bl	8000da8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4818      	ldr	r0, [pc, #96]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000ada:	f001 fea0 	bl	800281e <HAL_TIM_Encoder_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000ae4:	f000 f960 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000af8:	f002 fac4 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000b02:	f000 f951 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	2208      	movs	r2, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000b1e:	f001 ffbd 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000b28:	f000 f93e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM4_Init+0xf4>)
 8000b2e:	f000 faeb 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000b32:	bf00      	nop
 8000b34:	3748      	adds	r7, #72	; 0x48
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000014c 	.word	0x2000014c
 8000b40:	40000800 	.word	0x40000800

08000b44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b092      	sub	sp, #72	; 0x48
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	2224      	movs	r2, #36	; 0x24
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 fc1a 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b76:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <MX_TIM5_Init+0xf8>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b9a:	4827      	ldr	r0, [pc, #156]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000b9c:	f001 fdf0 	bl	8002780 <HAL_TIM_PWM_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000ba6:	f000 f8ff 	bl	8000da8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000baa:	2303      	movs	r3, #3
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000bd6:	f001 fe22 	bl	800281e <HAL_TIM_Encoder_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000be0:	f000 f8e2 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000bf4:	f002 fa46 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000bfe:	f000 f8d3 	bl	8000da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c02:	2360      	movs	r3, #96	; 0x60
 8000c04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	2208      	movs	r2, #8
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000c1a:	f001 ff3f 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM5_Init+0xe4>
  {
    Error_Handler();
 8000c24:	f000 f8c0 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <MX_TIM5_Init+0xf4>)
 8000c2a:	f000 fa6d 	bl	8001108 <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3748      	adds	r7, #72	; 0x48
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000194 	.word	0x20000194
 8000c3c:	40000c00 	.word	0x40000c00

08000c40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_USART6_UART_Init+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART6_UART_Init+0x4c>)
 8000c78:	f002 fac4 	bl	8003204 <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c82:	f000 f891 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001dc 	.word	0x200001dc
 8000c90:	40011400 	.word	0x40011400

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a23      	ldr	r2, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_GPIO_Init+0xc8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_Dir_Pin|M0_Dir_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000d04:	4816      	ldr	r0, [pc, #88]	; (8000d60 <MX_GPIO_Init+0xcc>)
 8000d06:	f001 f8c9 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_Dir_Pin|M1_Dir_Pin|M3_Dir_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f240 2106 	movw	r1, #518	; 0x206
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0xd0>)
 8000d12:	f001 f8c3 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_Dir_Pin M0_Dir_Pin */
  GPIO_InitStruct.Pin = M4_Dir_Pin|M0_Dir_Pin;
 8000d16:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_GPIO_Init+0xcc>)
 8000d30:	f000 ff30 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_Dir_Pin M1_Dir_Pin M3_Dir_Pin */
  GPIO_InitStruct.Pin = M2_Dir_Pin|M1_Dir_Pin|M3_Dir_Pin;
 8000d34:	f240 2306 	movw	r3, #518	; 0x206
 8000d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0xd0>)
 8000d4e:	f000 ff21 	bl	8001b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020800 	.word	0x40020800
 8000d64:	40020400 	.word	0x40020400

08000d68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f002 fe19 	bl	80039a8 <osDelay>
 8000d76:	e7fb      	b.n	8000d70 <StartDefaultTask+0x8>

08000d78 <ReadEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadEncoder */
void ReadEncoder(void *argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadEncoder */
  TickType_t xLastWakeTime;
  // How often to run, ie. every 10 ms
  const TickType_t xFrequency = 100;
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	617b      	str	r3, [r7, #20]
  xLastWakeTime = xTaskGetTickCount();
 8000d84:	f003 ff66 	bl	8004c54 <xTaskGetTickCount>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	6979      	ldr	r1, [r7, #20]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fd9a 	bl	80048cc <vTaskDelayUntil>
	  uint16_t count = (TIM1->CNT)>>2;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <ReadEncoder+0x2c>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	827b      	strh	r3, [r7, #18]
  {
 8000da0:	e7f4      	b.n	8000d8c <ReadEncoder+0x14>
 8000da2:	bf00      	nop
 8000da4:	40010000 	.word	0x40010000

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_MspInit+0x54>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a11      	ldr	r2, [pc, #68]	; (8000e08 <HAL_MspInit+0x54>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x54>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_MspInit+0x54>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_MspInit+0x54>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_MspInit+0x54>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f000 fea2 	bl	8001b42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_ADC_MspInit+0x7c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d127      	bne.n	8000e7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = M0_Cur_Sense_Pin|M1_Cur_Sense_Pin|M2_Cur_Sense_Pin|M3_Cur_Sense_Pin
 8000e66:	23f8      	movs	r3, #248	; 0xf8
 8000e68:	617b      	str	r3, [r7, #20]
                          |M4_Cur_Sense_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_ADC_MspInit+0x84>)
 8000e7a:	f000 fe8b 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b092      	sub	sp, #72	; 0x48
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a8d      	ldr	r2, [pc, #564]	; (80010e8 <HAL_TIM_PWM_MspInit+0x254>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12d      	bne.n	8000f12 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8000eba:	4b8c      	ldr	r3, [pc, #560]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a8b      	ldr	r2, [pc, #556]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b89      	ldr	r3, [pc, #548]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed6:	4b85      	ldr	r3, [pc, #532]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a84      	ldr	r2, [pc, #528]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b82      	ldr	r3, [pc, #520]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4879      	ldr	r0, [pc, #484]	; (80010f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f0c:	f000 fe42 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f10:	e0e5      	b.n	80010de <HAL_TIM_PWM_MspInit+0x24a>
  else if(htim_pwm->Instance==TIM2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1a:	d14b      	bne.n	8000fb4 <HAL_TIM_PWM_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f20:	4b72      	ldr	r3, [pc, #456]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	4a71      	ldr	r2, [pc, #452]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2c:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3c:	4b6b      	ldr	r3, [pc, #428]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	4b64      	ldr	r3, [pc, #400]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	4a63      	ldr	r2, [pc, #396]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	6313      	str	r3, [r2, #48]	; 0x30
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = M1_A_Pin;
 8000f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f82:	2301      	movs	r3, #1
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(M1_A_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4858      	ldr	r0, [pc, #352]	; (80010f0 <HAL_TIM_PWM_MspInit+0x25c>)
 8000f8e:	f000 fe01 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_B_Pin;
 8000f92:	2308      	movs	r3, #8
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(M1_B_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000faa:	4619      	mov	r1, r3
 8000fac:	4851      	ldr	r0, [pc, #324]	; (80010f4 <HAL_TIM_PWM_MspInit+0x260>)
 8000fae:	f000 fdf1 	bl	8001b94 <HAL_GPIO_Init>
}
 8000fb2:	e094      	b.n	80010de <HAL_TIM_PWM_MspInit+0x24a>
  else if(htim_pwm->Instance==TIM3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_TIM_PWM_MspInit+0x264>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_TIM_PWM_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a42      	ldr	r2, [pc, #264]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M2_A_Pin|M2_B_Pin;
 8000ff6:	23c0      	movs	r3, #192	; 0xc0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001006:	2302      	movs	r3, #2
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800100e:	4619      	mov	r1, r3
 8001010:	483a      	ldr	r0, [pc, #232]	; (80010fc <HAL_TIM_PWM_MspInit+0x268>)
 8001012:	f000 fdbf 	bl	8001b94 <HAL_GPIO_Init>
}
 8001016:	e062      	b.n	80010de <HAL_TIM_PWM_MspInit+0x24a>
  else if(htim_pwm->Instance==TIM4)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a38      	ldr	r2, [pc, #224]	; (8001100 <HAL_TIM_PWM_MspInit+0x26c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12c      	bne.n	800107c <HAL_TIM_PWM_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a29      	ldr	r2, [pc, #164]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_A_Pin|M3_B_Pin;
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800106a:	2302      	movs	r3, #2
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001072:	4619      	mov	r1, r3
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <HAL_TIM_PWM_MspInit+0x260>)
 8001076:	f000 fd8d 	bl	8001b94 <HAL_GPIO_Init>
}
 800107a:	e030      	b.n	80010de <HAL_TIM_PWM_MspInit+0x24a>
  else if(htim_pwm->Instance==TIM5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <HAL_TIM_PWM_MspInit+0x270>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12b      	bne.n	80010de <HAL_TIM_PWM_MspInit+0x24a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_TIM_PWM_MspInit+0x258>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_A_Pin|M4_B_Pin;
 80010be:	2303      	movs	r3, #3
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010ce:	2302      	movs	r3, #2
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_TIM_PWM_MspInit+0x25c>)
 80010da:	f000 fd5b 	bl	8001b94 <HAL_GPIO_Init>
}
 80010de:	bf00      	nop
 80010e0:	3748      	adds	r7, #72	; 0x48
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40000400 	.word	0x40000400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40000800 	.word	0x40000800
 8001104:	40000c00 	.word	0x40000c00

08001108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a5b      	ldr	r2, [pc, #364]	; (8001294 <HAL_TIM_MspPostInit+0x18c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d11f      	bne.n	800116a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a59      	ldr	r2, [pc, #356]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M0_PWM_Pin;
 8001146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M0_PWM_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	484e      	ldr	r0, [pc, #312]	; (800129c <HAL_TIM_MspPostInit+0x194>)
 8001164:	f000 fd16 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001168:	e090      	b.n	800128c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001172:	d11f      	bne.n	80011b4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	4b47      	ldr	r3, [pc, #284]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a46      	ldr	r2, [pc, #280]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b44      	ldr	r3, [pc, #272]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	483c      	ldr	r0, [pc, #240]	; (80012a0 <HAL_TIM_MspPostInit+0x198>)
 80011ae:	f000 fcf1 	bl	8001b94 <HAL_GPIO_Init>
}
 80011b2:	e06b      	b.n	800128c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <HAL_TIM_MspPostInit+0x19c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11e      	bne.n	80011fc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ea:	2302      	movs	r3, #2
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <HAL_TIM_MspPostInit+0x198>)
 80011f6:	f000 fccd 	bl	8001b94 <HAL_GPIO_Init>
}
 80011fa:	e047      	b.n	800128c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM4)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	; (80012a8 <HAL_TIM_MspPostInit+0x1a0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d11f      	bne.n	8001246 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001234:	2302      	movs	r3, #2
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <HAL_TIM_MspPostInit+0x198>)
 8001240:	f000 fca8 	bl	8001b94 <HAL_GPIO_Init>
}
 8001244:	e022      	b.n	800128c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM5)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <HAL_TIM_MspPostInit+0x1a4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d11d      	bne.n	800128c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_TIM_MspPostInit+0x190>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M4_PWM_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800127c:	2302      	movs	r3, #2
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M4_PWM_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_TIM_MspPostInit+0x194>)
 8001288:	f000 fc84 	bl	8001b94 <HAL_GPIO_Init>
}
 800128c:	bf00      	nop
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010000 	.word	0x40010000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40000800 	.word	0x40000800
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12c      	bne.n	800132c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f003 0320 	and.w	r3, r3, #32
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800130a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800131c:	2308      	movs	r3, #8
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_MspInit+0x8c>)
 8001328:	f000 fc34 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40011400 	.word	0x40011400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 f898 	bl	80014a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001374:	f003 ffa4 	bl	80052c0 <xTaskGetSchedulerState>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800137e:	f004 fd8b 	bl	8005e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013d6:	f7ff ffd7 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f004 ffdf 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff f8a1 	bl	8000524 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013f0:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 80013f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013f8:	20004b7c 	.word	0x20004b7c

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 fb7f 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fcbe 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fb89 	bl	8001b7a <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 fb5f 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000228 	.word	0x20000228

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000228 	.word	0x20000228

080014e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e033      	b.n	8001562 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fc82 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b00      	cmp	r3, #0
 8001520:	d118      	bne.n	8001554 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800152a:	f023 0302 	bic.w	r3, r3, #2
 800152e:	f043 0202 	orr.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f94a 	bl	80017d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
 8001552:	e001      	b.n	8001558 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1c>
 8001584:	2302      	movs	r3, #2
 8001586:	e113      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x244>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b09      	cmp	r3, #9
 8001596:	d925      	bls.n	80015e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68d9      	ldr	r1, [r3, #12]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	3b1e      	subs	r3, #30
 80015ae:	2207      	movs	r2, #7
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43da      	mvns	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	400a      	ands	r2, r1
 80015bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68d9      	ldr	r1, [r3, #12]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4403      	add	r3, r0
 80015d6:	3b1e      	subs	r3, #30
 80015d8:	409a      	lsls	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e022      	b.n	800162a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6919      	ldr	r1, [r3, #16]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	2207      	movs	r2, #7
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6919      	ldr	r1, [r3, #16]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	4603      	mov	r3, r0
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4403      	add	r3, r0
 8001620:	409a      	lsls	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d824      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b05      	subs	r3, #5
 8001644:	221f      	movs	r2, #31
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	400a      	ands	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b05      	subs	r3, #5
 800166e:	fa00 f203 	lsl.w	r2, r0, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
 800167a:	e04c      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d824      	bhi.n	80016ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	3b23      	subs	r3, #35	; 0x23
 8001696:	221f      	movs	r2, #31
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43da      	mvns	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	400a      	ands	r2, r1
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b23      	subs	r3, #35	; 0x23
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
 80016cc:	e023      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b41      	subs	r3, #65	; 0x41
 80016e0:	221f      	movs	r2, #31
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	400a      	ands	r2, r1
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4618      	mov	r0, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3b41      	subs	r3, #65	; 0x41
 800170a:	fa00 f203 	lsl.w	r2, r0, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_ADC_ConfigChannel+0x250>)
 8001718:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_ADC_ConfigChannel+0x254>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d10f      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1d8>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b12      	cmp	r3, #18
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_ADC_ConfigChannel+0x254>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12b      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x23a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_ADC_ConfigChannel+0x258>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d003      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x1f4>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b11      	cmp	r3, #17
 800175e:	d122      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_ADC_ConfigChannel+0x258>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d111      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_ADC_ConfigChannel+0x25c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a11      	ldr	r2, [pc, #68]	; (80017cc <HAL_ADC_ConfigChannel+0x260>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9a      	lsrs	r2, r3, #18
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001798:	e002      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40012300 	.word	0x40012300
 80017c0:	40012000 	.word	0x40012000
 80017c4:	10000012 	.word	0x10000012
 80017c8:	20000000 	.word	0x20000000
 80017cc:	431bde83 	.word	0x431bde83

080017d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d8:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <ADC_Init+0x1f0>)
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	021a      	lsls	r2, r3, #8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6899      	ldr	r1, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <ADC_Init+0x1f4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d022      	beq.n	80018ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001876:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6899      	ldr	r1, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	e00f      	b.n	80018ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0202 	bic.w	r2, r2, #2
 80018dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
 80018e8:	005a      	lsls	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01b      	beq.n	8001934 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800191a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	3b01      	subs	r3, #1
 8001928:	035a      	lsls	r2, r3, #13
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e007      	b.n	8001944 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	3b01      	subs	r3, #1
 8001960:	051a      	lsls	r2, r3, #20
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001986:	025a      	lsls	r2, r3, #9
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6899      	ldr	r1, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	029a      	lsls	r2, r3, #10
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40012300 	.word	0x40012300
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <__NVIC_SetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff47 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5c 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e159      	b.n	8001e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8148 	bne.w	8001e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a2 	beq.w	8001e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x202>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a48      	ldr	r2, [pc, #288]	; (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x1fe>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x1fa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_GPIO_Init+0x2fc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x1f6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <HAL_GPIO_Init+0x300>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x1f2>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	; (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_GPIO_Init+0x304>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f aea2 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e267      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	4b88      	ldr	r3, [pc, #544]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4b85      	ldr	r3, [pc, #532]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b7e      	ldr	r3, [pc, #504]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e242      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b70      	ldr	r3, [pc, #448]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6f      	ldr	r2, [pc, #444]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6c      	ldr	r2, [pc, #432]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b69      	ldr	r3, [pc, #420]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a68      	ldr	r2, [pc, #416]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b66      	ldr	r3, [pc, #408]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a65      	ldr	r2, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff faa0 	bl	80014cc <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fa9c 	bl	80014cc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e207      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fa8c 	bl	80014cc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fa88 	bl	80014cc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1f3      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b51      	ldr	r3, [pc, #324]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1c7      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4937      	ldr	r1, [pc, #220]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCC_OscConfig+0x244>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fa41 	bl	80014cc <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff fa3d 	bl	80014cc <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a8      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4925      	ldr	r1, [pc, #148]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCC_OscConfig+0x244>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fa20 	bl	80014cc <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fa1c 	bl	80014cc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e187      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d036      	beq.n	8002128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x248>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fa00 	bl	80014cc <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f9fc 	bl	80014cc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e167      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x240>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e01b      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_OscConfig+0x248>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff f9e9 	bl	80014cc <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f9e5 	bl	80014cc <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d907      	bls.n	800211c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e150      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002110:	40023800 	.word	0x40023800
 8002114:	42470000 	.word	0x42470000
 8002118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ea      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8097 	beq.w	8002264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b81      	ldr	r3, [pc, #516]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b7d      	ldr	r3, [pc, #500]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a7c      	ldr	r2, [pc, #496]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b7a      	ldr	r3, [pc, #488]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b77      	ldr	r3, [pc, #476]	; (8002344 <HAL_RCC_OscConfig+0x474>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b74      	ldr	r3, [pc, #464]	; (8002344 <HAL_RCC_OscConfig+0x474>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a73      	ldr	r2, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x474>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff f9a5 	bl	80014cc <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff f9a1 	bl	80014cc <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e10c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x474>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x2ea>
 80021ac:	4b64      	ldr	r3, [pc, #400]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a63      	ldr	r2, [pc, #396]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x30c>
 80021c2:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021dc:	4b58      	ldr	r3, [pc, #352]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a57      	ldr	r2, [pc, #348]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	4b55      	ldr	r3, [pc, #340]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a54      	ldr	r2, [pc, #336]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff f966 	bl	80014cc <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7ff f962 	bl	80014cc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0cb      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCC_OscConfig+0x334>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff f950 	bl	80014cc <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff f94c 	bl	80014cc <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0b5      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a38      	ldr	r2, [pc, #224]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a1 	beq.w	80023b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d05c      	beq.n	8002334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d141      	bne.n	8002306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_RCC_OscConfig+0x478>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff f920 	bl	80014cc <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f91c 	bl	80014cc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e087      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	491b      	ldr	r1, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x478>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f8f5 	bl	80014cc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff f8f1 	bl	80014cc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e05c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x416>
 8002304:	e054      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f8de 	bl	80014cc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f8da 	bl	80014cc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e045      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e038      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000
 8002348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d028      	beq.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d121      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d11a      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d111      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7ff f80c 	bl	80014cc <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7ff f808 	bl	80014cc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe ff6c 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	08006490 	.word	0x08006490
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b090      	sub	sp, #64	; 0x40
 8002592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d00d      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f200 80a1 	bhi.w	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025be:	e09b      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025c4:	e09b      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ca:	e098      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d6:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d028      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	627a      	str	r2, [r7, #36]	; 0x24
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025f4:	2100      	movs	r1, #0
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	fb03 f201 	mul.w	r2, r3, r1
 80025fc:	2300      	movs	r3, #0
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	4413      	add	r3, r2
 8002604:	4a43      	ldr	r2, [pc, #268]	; (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 8002606:	fba0 1202 	umull	r1, r2, r0, r2
 800260a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800260c:	460a      	mov	r2, r1
 800260e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002612:	4413      	add	r3, r2
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002618:	2200      	movs	r2, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	61fa      	str	r2, [r7, #28]
 800261e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002626:	f7fd fddb 	bl	80001e0 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4613      	mov	r3, r2
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002632:	e053      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	2200      	movs	r2, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	617a      	str	r2, [r7, #20]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002646:	f04f 0b00 	mov.w	fp, #0
 800264a:	4652      	mov	r2, sl
 800264c:	465b      	mov	r3, fp
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ebb2 080a 	subs.w	r8, r2, sl
 8002666:	eb63 090b 	sbc.w	r9, r3, fp
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800267a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800267e:	ebb2 0408 	subs.w	r4, r2, r8
 8002682:	eb63 0509 	sbc.w	r5, r3, r9
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	00eb      	lsls	r3, r5, #3
 8002690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	eb14 030a 	adds.w	r3, r4, sl
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	eb45 030b 	adc.w	r3, r5, fp
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b2:	4629      	mov	r1, r5
 80026b4:	028b      	lsls	r3, r1, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026bc:	4621      	mov	r1, r4
 80026be:	028a      	lsls	r2, r1, #10
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	2200      	movs	r2, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d0:	f7fd fd86 	bl	80001e0 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80026ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002700:	4618      	mov	r0, r3
 8002702:	3740      	adds	r7, #64	; 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	017d7840 	.word	0x017d7840

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	080064a0 	.word	0x080064a0

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	080064a0 	.word	0x080064a0

08002780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e041      	b.n	8002816 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fb74 	bl	8000e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 fa2e 	bl	8002c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e097      	b.n	8002962 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f88f 	bl	800296a <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f000 f9d4 	bl	8002c20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	f023 0303 	bic.w	r3, r3, #3
 80028a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4313      	orrs	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028be:	f023 030c 	bic.w	r3, r3, #12
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	4313      	orrs	r3, r2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	011a      	lsls	r2, r3, #4
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	4313      	orrs	r3, r2
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002904:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	4313      	orrs	r3, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002996:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800299e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029a6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d110      	bne.n	80029d0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80029b4:	7b7b      	ldrb	r3, [r7, #13]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d001      	beq.n	80029be <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e069      	b.n	8002a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ce:	e031      	b.n	8002a34 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d110      	bne.n	80029f8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80029dc:	7b3b      	ldrb	r3, [r7, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e055      	b.n	8002a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f6:	e01d      	b.n	8002a34 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80029fe:	7bbb      	ldrb	r3, [r7, #14]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a0a:	7b3b      	ldrb	r3, [r7, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e03e      	b.n	8002a92 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_Encoder_Start+0xc4>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d008      	beq.n	8002a52 <HAL_TIM_Encoder_Start+0xd4>
 8002a40:	e00f      	b.n	8002a62 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faf4 	bl	8003038 <TIM_CCxChannelCmd>
      break;
 8002a50:	e016      	b.n	8002a80 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 faec 	bl	8003038 <TIM_CCxChannelCmd>
      break;
 8002a60:	e00e      	b.n	8002a80 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fae4 	bl	8003038 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2201      	movs	r2, #1
 8002a76:	2104      	movs	r1, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fadd 	bl	8003038 <TIM_CCxChannelCmd>
      break;
 8002a7e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e0ae      	b.n	8002c18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	f200 809f 	bhi.w	8002c08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002c09 	.word	0x08002c09
 8002ad8:	08002c09 	.word	0x08002c09
 8002adc:	08002c09 	.word	0x08002c09
 8002ae0:	08002b45 	.word	0x08002b45
 8002ae4:	08002c09 	.word	0x08002c09
 8002ae8:	08002c09 	.word	0x08002c09
 8002aec:	08002c09 	.word	0x08002c09
 8002af0:	08002b87 	.word	0x08002b87
 8002af4:	08002c09 	.word	0x08002c09
 8002af8:	08002c09 	.word	0x08002c09
 8002afc:	08002c09 	.word	0x08002c09
 8002b00:	08002bc7 	.word	0x08002bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f908 	bl	8002d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0204 	bic.w	r2, r2, #4
 8002b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6999      	ldr	r1, [r3, #24]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	619a      	str	r2, [r3, #24]
      break;
 8002b42:	e064      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f94e 	bl	8002dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	021a      	lsls	r2, r3, #8
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	619a      	str	r2, [r3, #24]
      break;
 8002b84:	e043      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f999 	bl	8002ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0208 	orr.w	r2, r2, #8
 8002ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0204 	bic.w	r2, r2, #4
 8002bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
      break;
 8002bc4:	e023      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f9e3 	bl	8002f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	021a      	lsls	r2, r3, #8
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	61da      	str	r2, [r3, #28]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00f      	beq.n	8002c58 <TIM_Base_SetConfig+0x38>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d00b      	beq.n	8002c58 <TIM_Base_SetConfig+0x38>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <TIM_Base_SetConfig+0xe8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d007      	beq.n	8002c58 <TIM_Base_SetConfig+0x38>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <TIM_Base_SetConfig+0xec>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0x38>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <TIM_Base_SetConfig+0xf0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01b      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d017      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <TIM_Base_SetConfig+0xe8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <TIM_Base_SetConfig+0xec>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00f      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <TIM_Base_SetConfig+0xf0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <TIM_Base_SetConfig+0xf4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <TIM_Base_SetConfig+0xf8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x8a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <TIM_Base_SetConfig+0xfc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d103      	bne.n	8002cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40000c00 	.word	0x40000c00
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 0302 	bic.w	r3, r3, #2
 8002d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <TIM_OC1_SetConfig+0xc8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10c      	bne.n	8002d96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f023 0308 	bic.w	r3, r3, #8
 8002d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <TIM_OC1_SetConfig+0xc8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	621a      	str	r2, [r3, #32]
}
 8002ddc:	bf00      	nop
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	40010000 	.word	0x40010000

08002dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0210 	bic.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f023 0320 	bic.w	r3, r3, #32
 8002e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <TIM_OC2_SetConfig+0xd4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10d      	bne.n	8002e68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <TIM_OC2_SetConfig+0xd4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d113      	bne.n	8002e98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	621a      	str	r2, [r3, #32]
}
 8002eb2:	bf00      	nop
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000

08002ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <TIM_OC3_SetConfig+0xd0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <TIM_OC3_SetConfig+0xd0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d113      	bne.n	8002f6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	621a      	str	r2, [r3, #32]
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40010000 	.word	0x40010000

08002f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	031b      	lsls	r3, r3, #12
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <TIM_OC4_SetConfig+0x9c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000

08003038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2201      	movs	r2, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1a      	ldr	r2, [r3, #32]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e050      	b.n	800313e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d013      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10c      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4313      	orrs	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40010000 	.word	0x40010000
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40014000 	.word	0x40014000

08003160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003178:	2302      	movs	r3, #2
 800317a:	e03d      	b.n	80031f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e03f      	b.n	8003296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe f840 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f829 	bl	80032a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800325c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800326c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800327c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b0c0      	sub	sp, #256	; 0x100
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	68d9      	ldr	r1, [r3, #12]
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	ea40 0301 	orr.w	r3, r0, r1
 80032c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	431a      	orrs	r2, r3
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032f8:	f021 010c 	bic.w	r1, r1, #12
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003306:	430b      	orrs	r3, r1
 8003308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	6999      	ldr	r1, [r3, #24]
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	ea40 0301 	orr.w	r3, r0, r1
 8003326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b8f      	ldr	r3, [pc, #572]	; (800356c <UART_SetConfig+0x2cc>)
 8003330:	429a      	cmp	r2, r3
 8003332:	d005      	beq.n	8003340 <UART_SetConfig+0xa0>
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <UART_SetConfig+0x2d0>)
 800333c:	429a      	cmp	r2, r3
 800333e:	d104      	bne.n	800334a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003340:	f7ff fa0a 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8003344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003348:	e003      	b.n	8003352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800334a:	f7ff f9f1 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800334e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335c:	f040 810c 	bne.w	8003578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003364:	2200      	movs	r2, #0
 8003366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800336a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800336e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003372:	4622      	mov	r2, r4
 8003374:	462b      	mov	r3, r5
 8003376:	1891      	adds	r1, r2, r2
 8003378:	65b9      	str	r1, [r7, #88]	; 0x58
 800337a:	415b      	adcs	r3, r3
 800337c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003382:	4621      	mov	r1, r4
 8003384:	eb12 0801 	adds.w	r8, r2, r1
 8003388:	4629      	mov	r1, r5
 800338a:	eb43 0901 	adc.w	r9, r3, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a2:	4690      	mov	r8, r2
 80033a4:	4699      	mov	r9, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	eb18 0303 	adds.w	r3, r8, r3
 80033ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b0:	462b      	mov	r3, r5
 80033b2:	eb49 0303 	adc.w	r3, r9, r3
 80033b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033ce:	460b      	mov	r3, r1
 80033d0:	18db      	adds	r3, r3, r3
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
 80033d4:	4613      	mov	r3, r2
 80033d6:	eb42 0303 	adc.w	r3, r2, r3
 80033da:	657b      	str	r3, [r7, #84]	; 0x54
 80033dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033e4:	f7fc fefc 	bl	80001e0 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b61      	ldr	r3, [pc, #388]	; (8003574 <UART_SetConfig+0x2d4>)
 80033ee:	fba3 2302 	umull	r2, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	011c      	lsls	r4, r3, #4
 80033f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003410:	415b      	adcs	r3, r3
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003418:	4641      	mov	r1, r8
 800341a:	eb12 0a01 	adds.w	sl, r2, r1
 800341e:	4649      	mov	r1, r9
 8003420:	eb43 0b01 	adc.w	fp, r3, r1
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003438:	4692      	mov	sl, r2
 800343a:	469b      	mov	fp, r3
 800343c:	4643      	mov	r3, r8
 800343e:	eb1a 0303 	adds.w	r3, sl, r3
 8003442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003446:	464b      	mov	r3, r9
 8003448:	eb4b 0303 	adc.w	r3, fp, r3
 800344c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800345c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003464:	460b      	mov	r3, r1
 8003466:	18db      	adds	r3, r3, r3
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
 800346a:	4613      	mov	r3, r2
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
 8003472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800347a:	f7fc feb1 	bl	80001e0 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4611      	mov	r1, r2
 8003484:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <UART_SetConfig+0x2d4>)
 8003486:	fba3 2301 	umull	r2, r3, r3, r1
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2264      	movs	r2, #100	; 0x64
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	1acb      	subs	r3, r1, r3
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <UART_SetConfig+0x2d4>)
 800349c:	fba3 2302 	umull	r2, r3, r3, r2
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034a8:	441c      	add	r4, r3
 80034aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c4:	415b      	adcs	r3, r3
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034cc:	4641      	mov	r1, r8
 80034ce:	1851      	adds	r1, r2, r1
 80034d0:	6339      	str	r1, [r7, #48]	; 0x30
 80034d2:	4649      	mov	r1, r9
 80034d4:	414b      	adcs	r3, r1
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034e4:	4659      	mov	r1, fp
 80034e6:	00cb      	lsls	r3, r1, #3
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ee:	4651      	mov	r1, sl
 80034f0:	00ca      	lsls	r2, r1, #3
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	4642      	mov	r2, r8
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003500:	464b      	mov	r3, r9
 8003502:	460a      	mov	r2, r1
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800351c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003520:	460b      	mov	r3, r1
 8003522:	18db      	adds	r3, r3, r3
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
 8003526:	4613      	mov	r3, r2
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003536:	f7fc fe53 	bl	80001e0 <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <UART_SetConfig+0x2d4>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <UART_SetConfig+0x2d4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	f003 0207 	and.w	r2, r3, #7
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4422      	add	r2, r4
 8003566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003568:	e106      	b.n	8003778 <UART_SetConfig+0x4d8>
 800356a:	bf00      	nop
 800356c:	40011000 	.word	0x40011000
 8003570:	40011400 	.word	0x40011400
 8003574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800358a:	4642      	mov	r2, r8
 800358c:	464b      	mov	r3, r9
 800358e:	1891      	adds	r1, r2, r2
 8003590:	6239      	str	r1, [r7, #32]
 8003592:	415b      	adcs	r3, r3
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800359a:	4641      	mov	r1, r8
 800359c:	1854      	adds	r4, r2, r1
 800359e:	4649      	mov	r1, r9
 80035a0:	eb43 0501 	adc.w	r5, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	00eb      	lsls	r3, r5, #3
 80035ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b2:	00e2      	lsls	r2, r4, #3
 80035b4:	4614      	mov	r4, r2
 80035b6:	461d      	mov	r5, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	18e3      	adds	r3, r4, r3
 80035bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035c0:	464b      	mov	r3, r9
 80035c2:	eb45 0303 	adc.w	r3, r5, r3
 80035c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035e6:	4629      	mov	r1, r5
 80035e8:	008b      	lsls	r3, r1, #2
 80035ea:	4621      	mov	r1, r4
 80035ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f0:	4621      	mov	r1, r4
 80035f2:	008a      	lsls	r2, r1, #2
 80035f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035f8:	f7fc fdf2 	bl	80001e0 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4b60      	ldr	r3, [pc, #384]	; (8003784 <UART_SetConfig+0x4e4>)
 8003602:	fba3 2302 	umull	r2, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	011c      	lsls	r4, r3, #4
 800360a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360e:	2200      	movs	r2, #0
 8003610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800361c:	4642      	mov	r2, r8
 800361e:	464b      	mov	r3, r9
 8003620:	1891      	adds	r1, r2, r2
 8003622:	61b9      	str	r1, [r7, #24]
 8003624:	415b      	adcs	r3, r3
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	4641      	mov	r1, r8
 800362e:	1851      	adds	r1, r2, r1
 8003630:	6139      	str	r1, [r7, #16]
 8003632:	4649      	mov	r1, r9
 8003634:	414b      	adcs	r3, r1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003644:	4659      	mov	r1, fp
 8003646:	00cb      	lsls	r3, r1, #3
 8003648:	4651      	mov	r1, sl
 800364a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364e:	4651      	mov	r1, sl
 8003650:	00ca      	lsls	r2, r1, #3
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	4603      	mov	r3, r0
 8003658:	4642      	mov	r2, r8
 800365a:	189b      	adds	r3, r3, r2
 800365c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003660:	464b      	mov	r3, r9
 8003662:	460a      	mov	r2, r1
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	67bb      	str	r3, [r7, #120]	; 0x78
 8003676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003684:	4649      	mov	r1, r9
 8003686:	008b      	lsls	r3, r1, #2
 8003688:	4641      	mov	r1, r8
 800368a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368e:	4641      	mov	r1, r8
 8003690:	008a      	lsls	r2, r1, #2
 8003692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003696:	f7fc fda3 	bl	80001e0 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	4b38      	ldr	r3, [pc, #224]	; (8003784 <UART_SetConfig+0x4e4>)
 80036a2:	fba3 2301 	umull	r2, r3, r3, r1
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2264      	movs	r2, #100	; 0x64
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	1acb      	subs	r3, r1, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a33      	ldr	r2, [pc, #204]	; (8003784 <UART_SetConfig+0x4e4>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	441c      	add	r4, r3
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	673b      	str	r3, [r7, #112]	; 0x70
 80036ca:	677a      	str	r2, [r7, #116]	; 0x74
 80036cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	415b      	adcs	r3, r3
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e0:	4641      	mov	r1, r8
 80036e2:	1851      	adds	r1, r2, r1
 80036e4:	6039      	str	r1, [r7, #0]
 80036e6:	4649      	mov	r1, r9
 80036e8:	414b      	adcs	r3, r1
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f8:	4659      	mov	r1, fp
 80036fa:	00cb      	lsls	r3, r1, #3
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003702:	4651      	mov	r1, sl
 8003704:	00ca      	lsls	r2, r1, #3
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	4603      	mov	r3, r0
 800370c:	4642      	mov	r2, r8
 800370e:	189b      	adds	r3, r3, r2
 8003710:	66bb      	str	r3, [r7, #104]	; 0x68
 8003712:	464b      	mov	r3, r9
 8003714:	460a      	mov	r2, r1
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	663b      	str	r3, [r7, #96]	; 0x60
 8003726:	667a      	str	r2, [r7, #100]	; 0x64
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003734:	4649      	mov	r1, r9
 8003736:	008b      	lsls	r3, r1, #2
 8003738:	4641      	mov	r1, r8
 800373a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800373e:	4641      	mov	r1, r8
 8003740:	008a      	lsls	r2, r1, #2
 8003742:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003746:	f7fc fd4b 	bl	80001e0 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <UART_SetConfig+0x4e4>)
 8003750:	fba3 1302 	umull	r1, r3, r3, r2
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	3332      	adds	r3, #50	; 0x32
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <UART_SetConfig+0x4e4>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4422      	add	r2, r4
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800377e:	46bd      	mov	sp, r7
 8003780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003784:	51eb851f 	.word	0x51eb851f

08003788 <__NVIC_SetPriority>:
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037e0:	2100      	movs	r1, #0
 80037e2:	f06f 0004 	mvn.w	r0, #4
 80037e6:	f7ff ffcf 	bl	8003788 <__NVIC_SetPriority>
#endif
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037f6:	f3ef 8305 	mrs	r3, IPSR
 80037fa:	603b      	str	r3, [r7, #0]
  return(result);
 80037fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003802:	f06f 0305 	mvn.w	r3, #5
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	e00c      	b.n	8003824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <osKernelInitialize+0x44>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <osKernelInitialize+0x44>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003818:	2300      	movs	r3, #0
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e002      	b.n	8003824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003824:	687b      	ldr	r3, [r7, #4]
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	2000022c 	.word	0x2000022c

08003838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383e:	f3ef 8305 	mrs	r3, IPSR
 8003842:	603b      	str	r3, [r7, #0]
  return(result);
 8003844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800384a:	f06f 0305 	mvn.w	r3, #5
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e010      	b.n	8003874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <osKernelStart+0x48>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d109      	bne.n	800386e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800385a:	f7ff ffbf 	bl	80037dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <osKernelStart+0x48>)
 8003860:	2202      	movs	r2, #2
 8003862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003864:	f001 f8e4 	bl	8004a30 <vTaskStartScheduler>
      stat = osOK;
 8003868:	2300      	movs	r3, #0
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e002      	b.n	8003874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003874:	687b      	ldr	r3, [r7, #4]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000022c 	.word	0x2000022c

08003884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	; 0x38
 8003888:	af04      	add	r7, sp, #16
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003894:	f3ef 8305 	mrs	r3, IPSR
 8003898:	617b      	str	r3, [r7, #20]
  return(result);
 800389a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800389c:	2b00      	cmp	r3, #0
 800389e:	d17e      	bne.n	800399e <osThreadNew+0x11a>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d07b      	beq.n	800399e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038aa:	2318      	movs	r3, #24
 80038ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d045      	beq.n	800394a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <osThreadNew+0x48>
        name = attr->name;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <osThreadNew+0x6e>
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b38      	cmp	r3, #56	; 0x38
 80038e4:	d805      	bhi.n	80038f2 <osThreadNew+0x6e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <osThreadNew+0x72>
        return (NULL);
 80038f2:	2300      	movs	r3, #0
 80038f4:	e054      	b.n	80039a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <osThreadNew+0xa8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b5b      	cmp	r3, #91	; 0x5b
 8003914:	d90a      	bls.n	800392c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <osThreadNew+0xa8>
        mem = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e010      	b.n	800394e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10c      	bne.n	800394e <osThreadNew+0xca>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d108      	bne.n	800394e <osThreadNew+0xca>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d104      	bne.n	800394e <osThreadNew+0xca>
          mem = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
 8003948:	e001      	b.n	800394e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d110      	bne.n	8003976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800395c:	9202      	str	r2, [sp, #8]
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fe0c 	bl	8004588 <xTaskCreateStatic>
 8003970:	4603      	mov	r3, r0
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e013      	b.n	800399e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d110      	bne.n	800399e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	b29a      	uxth	r2, r3
 8003980:	f107 0310 	add.w	r3, r7, #16
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fe57 	bl	8004642 <xTaskCreate>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d001      	beq.n	800399e <osThreadNew+0x11a>
            hTask = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800399e:	693b      	ldr	r3, [r7, #16]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3728      	adds	r7, #40	; 0x28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b0:	f3ef 8305 	mrs	r3, IPSR
 80039b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <osDelay+0x1c>
    stat = osErrorISR;
 80039bc:	f06f 0305 	mvn.w	r3, #5
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e007      	b.n	80039d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fffa 	bl	80049c8 <vTaskDelay>
    }
  }

  return (stat);
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80039f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <vApplicationGetIdleTaskMemory+0x30>)
 80039f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000230 	.word	0x20000230
 8003a10:	2000028c 	.word	0x2000028c

08003a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <vApplicationGetTimerTaskMemory+0x30>)
 8003a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	2000048c 	.word	0x2000048c
 8003a44:	200004e8 	.word	0x200004e8

08003a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0208 	add.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 0208 	add.w	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aea:	b480      	push	{r7}
 8003aec:	b085      	sub	sp, #20
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d103      	bne.n	8003b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e002      	b.n	8003b18 <vListInsert+0x2e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d2f6      	bcs.n	8003b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6852      	ldr	r2, [r2, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d103      	bne.n	8003b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1e5a      	subs	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bda:	f002 f8cb 	bl	8005d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	441a      	add	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	22ff      	movs	r2, #255	; 0xff
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 f981 	bl	8004f44 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <xQueueGenericReset+0xcc>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	e009      	b.n	8003c6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fef2 	bl	8003a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3324      	adds	r3, #36	; 0x24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff feed 	bl	8003a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c6e:	f002 f8b1 	bl	8005dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	; 0x38
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <xQueueGenericCreateStatic+0x52>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <xQueueGenericCreateStatic+0x56>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericCreateStatic+0x58>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	623b      	str	r3, [r7, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <xQueueGenericCreateStatic+0x7e>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <xQueueGenericCreateStatic+0x82>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <xQueueGenericCreateStatic+0x84>
 8003d02:	2300      	movs	r3, #0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	61fb      	str	r3, [r7, #28]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d1e:	2350      	movs	r3, #80	; 0x50
 8003d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b50      	cmp	r3, #80	; 0x50
 8003d26:	d00a      	beq.n	8003d3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	61bb      	str	r3, [r7, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f805 	bl	8003d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3730      	adds	r7, #48	; 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e002      	b.n	8003d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d9e:	2101      	movs	r1, #1
 8003da0:	69b8      	ldr	r0, [r7, #24]
 8003da2:	f7ff ff05 	bl	8003bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xQueueGenericSend+0x32>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <xQueueGenericSend+0x40>
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <xQueueGenericSend+0x44>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <xQueueGenericSend+0x46>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <xQueueGenericSend+0x60>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d103      	bne.n	8003e26 <xQueueGenericSend+0x6e>
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <xQueueGenericSend+0x72>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <xQueueGenericSend+0x74>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e46:	f001 fa3b 	bl	80052c0 <xTaskGetSchedulerState>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <xQueueGenericSend+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <xQueueGenericSend+0xa2>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <xQueueGenericSend+0xa4>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61fb      	str	r3, [r7, #28]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e76:	f001 ff7d 	bl	8005d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <xQueueGenericSend+0xd4>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d129      	bne.n	8003ee0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e92:	f000 fa0b 	bl	80042ac <prvCopyDataToQueue>
 8003e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 f84d 	bl	8004f44 <xTaskRemoveFromEventList>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d013      	beq.n	8003ed8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <xQueueGenericSend+0x1f8>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	e00a      	b.n	8003ed8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <xQueueGenericSend+0x1f8>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ed8:	f001 ff7c 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e063      	b.n	8003fa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ee6:	f001 ff75 	bl	8005dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e05c      	b.n	8003fa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f887 	bl	800500c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f02:	f001 ff67 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f06:	f000 fdf9 	bl	8004afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f0a:	f001 ff33 	bl	8005d74 <vPortEnterCritical>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d103      	bne.n	8003f24 <xQueueGenericSend+0x16c>
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d103      	bne.n	8003f3a <xQueueGenericSend+0x182>
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3a:	f001 ff4b 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f3e:	1d3a      	adds	r2, r7, #4
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f876 	bl	8005038 <xTaskCheckForTimeOut>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d124      	bne.n	8003f9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f54:	f000 faa2 	bl	800449c <prvIsQueueFull>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	3310      	adds	r3, #16
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ff9c 	bl	8004ea4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6e:	f000 fa2d 	bl	80043cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f72:	f000 fdd1 	bl	8004b18 <xTaskResumeAll>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f af7c 	bne.w	8003e76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <xQueueGenericSend+0x1f8>)
 8003f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	e772      	b.n	8003e76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f92:	f000 fa1b 	bl	80043cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f96:	f000 fdbf 	bl	8004b18 <xTaskResumeAll>
 8003f9a:	e76c      	b.n	8003e76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f9e:	f000 fa15 	bl	80043cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fa2:	f000 fdb9 	bl	8004b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3738      	adds	r7, #56	; 0x38
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b090      	sub	sp, #64	; 0x40
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d103      	bne.n	8003ff0 <xQueueGenericSendFromISR+0x3c>
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <xQueueGenericSendFromISR+0x40>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <xQueueGenericSendFromISR+0x42>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d103      	bne.n	800401e <xQueueGenericSendFromISR+0x6a>
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <xQueueGenericSendFromISR+0x6e>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericSendFromISR+0x70>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	623b      	str	r3, [r7, #32]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800403e:	f001 ff7b 	bl	8005f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004042:	f3ef 8211 	mrs	r2, BASEPRI
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	61fa      	str	r2, [r7, #28]
 8004058:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800405a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <xQueueGenericSendFromISR+0xbc>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d12f      	bne.n	80040d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004086:	f000 f911 	bl	80042ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800408a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d112      	bne.n	80040ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d016      	beq.n	80040ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 ff4f 	bl	8004f44 <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e007      	b.n	80040ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040be:	3301      	adds	r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b25a      	sxtb	r2, r3
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040ca:	2301      	movs	r3, #1
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80040ce:	e001      	b.n	80040d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3740      	adds	r7, #64	; 0x40
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	; 0x30
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <xQueueReceive+0x30>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	623b      	str	r3, [r7, #32]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <xQueueReceive+0x3e>
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <xQueueReceive+0x42>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueReceive+0x44>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xQueueReceive+0x5e>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61fb      	str	r3, [r7, #28]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800414a:	f001 f8b9 	bl	80052c0 <xTaskGetSchedulerState>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <xQueueReceive+0x6e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueReceive+0x72>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <xQueueReceive+0x74>
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueReceive+0x8e>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	61bb      	str	r3, [r7, #24]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800417a:	f001 fdfb 	bl	8005d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01f      	beq.n	80041ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418e:	f000 f8f7 	bl	8004380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	1e5a      	subs	r2, r3, #1
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00f      	beq.n	80041c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	3310      	adds	r3, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fecc 	bl	8004f44 <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <xQueueReceive+0x1bc>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041c2:	f001 fe07 	bl	8005dd4 <vPortExitCritical>
				return pdPASS;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e069      	b.n	800429e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d103      	bne.n	80041d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041d0:	f001 fe00 	bl	8005dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e062      	b.n	800429e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041de:	f107 0310 	add.w	r3, r7, #16
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 ff12 	bl	800500c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ec:	f001 fdf2 	bl	8005dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041f0:	f000 fc84 	bl	8004afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041f4:	f001 fdbe 	bl	8005d74 <vPortEnterCritical>
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d103      	bne.n	800420e <xQueueReceive+0x122>
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004214:	b25b      	sxtb	r3, r3
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d103      	bne.n	8004224 <xQueueReceive+0x138>
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004224:	f001 fdd6 	bl	8005dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004228:	1d3a      	adds	r2, r7, #4
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 ff01 	bl	8005038 <xTaskCheckForTimeOut>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d123      	bne.n	8004284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800423c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800423e:	f000 f917 	bl	8004470 <prvIsQueueEmpty>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d017      	beq.n	8004278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fe27 	bl	8004ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004258:	f000 f8b8 	bl	80043cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800425c:	f000 fc5c 	bl	8004b18 <xTaskResumeAll>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d189      	bne.n	800417a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <xQueueReceive+0x1bc>)
 8004268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	e780      	b.n	800417a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800427a:	f000 f8a7 	bl	80043cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800427e:	f000 fc4b 	bl	8004b18 <xTaskResumeAll>
 8004282:	e77a      	b.n	800417a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004286:	f000 f8a1 	bl	80043cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800428a:	f000 fc45 	bl	8004b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800428e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004290:	f000 f8ee 	bl	8004470 <prvIsQueueEmpty>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	f43f af6f 	beq.w	800417a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800429c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3730      	adds	r7, #48	; 0x30
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d14d      	bne.n	800436e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f810 	bl	80052fc <xTaskPriorityDisinherit>
 80042dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	e043      	b.n	800436e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d119      	bne.n	8004320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6858      	ldr	r0, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	461a      	mov	r2, r3
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	f002 f874 	bl	80063e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	429a      	cmp	r2, r3
 8004314:	d32b      	bcc.n	800436e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	e026      	b.n	800436e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68d8      	ldr	r0, [r3, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	461a      	mov	r2, r3
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	f002 f85a 	bl	80063e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	425b      	negs	r3, r3
 800433a:	441a      	add	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d207      	bcs.n	800435c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	425b      	negs	r3, r3
 8004356:	441a      	add	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d105      	bne.n	800436e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3b01      	subs	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004376:	697b      	ldr	r3, [r7, #20]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d018      	beq.n	80043c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	441a      	add	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d303      	bcc.n	80043b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	461a      	mov	r2, r3
 80043be:	6838      	ldr	r0, [r7, #0]
 80043c0:	f002 f810 	bl	80063e4 <memcpy>
	}
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043d4:	f001 fcce 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043e0:	e011      	b.n	8004406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d012      	beq.n	8004410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3324      	adds	r3, #36	; 0x24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fda8 	bl	8004f44 <xTaskRemoveFromEventList>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043fa:	f000 fe7f 	bl	80050fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3b01      	subs	r3, #1
 8004402:	b2db      	uxtb	r3, r3
 8004404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	dce9      	bgt.n	80043e2 <prvUnlockQueue+0x16>
 800440e:	e000      	b.n	8004412 <prvUnlockQueue+0x46>
					break;
 8004410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800441a:	f001 fcdb 	bl	8005dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800441e:	f001 fca9 	bl	8005d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800442a:	e011      	b.n	8004450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3310      	adds	r3, #16
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fd83 	bl	8004f44 <xTaskRemoveFromEventList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004444:	f000 fe5a 	bl	80050fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	3b01      	subs	r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004454:	2b00      	cmp	r3, #0
 8004456:	dce9      	bgt.n	800442c <prvUnlockQueue+0x60>
 8004458:	e000      	b.n	800445c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800445a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004464:	f001 fcb6 	bl	8005dd4 <vPortExitCritical>
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004478:	f001 fc7c 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e001      	b.n	800448e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800448e:	f001 fca1 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044a4:	f001 fc66 	bl	8005d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d102      	bne.n	80044ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e001      	b.n	80044be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044be:	f001 fc89 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e014      	b.n	8004506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <vQueueAddToRegistry+0x50>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <vQueueAddToRegistry+0x50>)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044f2:	4a0a      	ldr	r2, [pc, #40]	; (800451c <vQueueAddToRegistry+0x50>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044fe:	e006      	b.n	800450e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d9e7      	bls.n	80044dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	200008e8 	.word	0x200008e8

08004520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004530:	f001 fc20 	bl	8005d74 <vPortEnterCritical>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800453a:	b25b      	sxtb	r3, r3
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d103      	bne.n	800454a <vQueueWaitForMessageRestricted+0x2a>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004550:	b25b      	sxtb	r3, r3
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d103      	bne.n	8004560 <vQueueWaitForMessageRestricted+0x40>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004560:	f001 fc38 	bl	8005dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3324      	adds	r3, #36	; 0x24
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fcb9 	bl	8004eec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f7ff ff26 	bl	80043cc <prvUnlockQueue>
	}
 8004580:	bf00      	nop
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	; 0x38
 800458c:	af04      	add	r7, sp, #16
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	623b      	str	r3, [r7, #32]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <xTaskCreateStatic+0x46>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61fb      	str	r3, [r7, #28]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045ce:	235c      	movs	r3, #92	; 0x5c
 80045d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b5c      	cmp	r3, #92	; 0x5c
 80045d6:	d00a      	beq.n	80045ee <xTaskCreateStatic+0x66>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01e      	beq.n	8004634 <xTaskCreateStatic+0xac>
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800460e:	2300      	movs	r3, #0
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	9302      	str	r3, [sp, #8]
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f850 	bl	80046cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800462c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800462e:	f000 f8dd 	bl	80047ec <prvAddNewTaskToReadyList>
 8004632:	e001      	b.n	8004638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004638:	697b      	ldr	r3, [r7, #20]
	}
 800463a:	4618      	mov	r0, r3
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08c      	sub	sp, #48	; 0x30
 8004646:	af04      	add	r7, sp, #16
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fcae 	bl	8005fb8 <pvPortMalloc>
 800465c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004664:	205c      	movs	r0, #92	; 0x5c
 8004666:	f001 fca7 	bl	8005fb8 <pvPortMalloc>
 800466a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
 8004678:	e005      	b.n	8004686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f001 fd68 	bl	8006150 <vPortFree>
 8004680:	e001      	b.n	8004686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	2300      	movs	r3, #0
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f80e 	bl	80046cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b0:	69f8      	ldr	r0, [r7, #28]
 80046b2:	f000 f89b 	bl	80047ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e002      	b.n	80046c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046c2:	69bb      	ldr	r3, [r7, #24]
	}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	461a      	mov	r2, r3
 80046e4:	21a5      	movs	r1, #165	; 0xa5
 80046e6:	f001 fe51 	bl	800638c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	3b01      	subs	r3, #1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f023 0307 	bic.w	r3, r3, #7
 8004702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <prvInitialiseNewTask+0x58>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	617b      	str	r3, [r7, #20]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01f      	beq.n	800476a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	e012      	b.n	8004756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	7819      	ldrb	r1, [r3, #0]
 8004738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	3334      	adds	r3, #52	; 0x34
 8004740:	460a      	mov	r2, r1
 8004742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3301      	adds	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b0f      	cmp	r3, #15
 800475a:	d9e9      	bls.n	8004730 <prvInitialiseNewTask+0x64>
 800475c:	e000      	b.n	8004760 <prvInitialiseNewTask+0x94>
			{
				break;
 800475e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004768:	e003      	b.n	8004772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	2b37      	cmp	r3, #55	; 0x37
 8004776:	d901      	bls.n	800477c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004778:	2337      	movs	r3, #55	; 0x37
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	2200      	movs	r2, #0
 800478c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	3304      	adds	r3, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f978 	bl	8003a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	3318      	adds	r3, #24
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff f973 	bl	8003a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	69b8      	ldr	r0, [r7, #24]
 80047cc:	f001 f9a6 	bl	8005b1c <pxPortInitialiseStack>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047f4:	f001 fabe 	bl	8005d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047f8:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 8004800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800480a:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <prvAddNewTaskToReadyList+0xc4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d110      	bne.n	800483a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004818:	f000 fc94 	bl	8005144 <prvInitialiseTaskLists>
 800481c:	e00d      	b.n	800483a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800481e:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <prvAddNewTaskToReadyList+0xcc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004826:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	429a      	cmp	r2, r3
 8004832:	d802      	bhi.n	800483a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004834:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <prvAddNewTaskToReadyList+0xd0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <prvAddNewTaskToReadyList+0xd0>)
 8004842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <prvAddNewTaskToReadyList+0xd0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <prvAddNewTaskToReadyList+0xd4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d903      	bls.n	8004860 <prvAddNewTaskToReadyList+0x74>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <prvAddNewTaskToReadyList+0xd4>)
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <prvAddNewTaskToReadyList+0xd8>)
 800486e:	441a      	add	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7ff f913 	bl	8003aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800487c:	f001 faaa 	bl	8005dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <prvAddNewTaskToReadyList+0xcc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddNewTaskToReadyList+0xc8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d207      	bcs.n	80048a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvAddNewTaskToReadyList+0xdc>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000dfc 	.word	0x20000dfc
 80048b4:	20000928 	.word	0x20000928
 80048b8:	20000e08 	.word	0x20000e08
 80048bc:	20000e18 	.word	0x20000e18
 80048c0:	20000e04 	.word	0x20000e04
 80048c4:	2000092c 	.word	0x2000092c
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	617b      	str	r3, [r7, #20]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <vTaskDelayUntil+0x46>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	613b      	str	r3, [r7, #16]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004912:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <vTaskDelayUntil+0xf0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <vTaskDelayUntil+0x64>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60fb      	str	r3, [r7, #12]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004930:	f000 f8e4 	bl	8004afc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004934:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <vTaskDelayUntil+0xf4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4413      	add	r3, r2
 8004942:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	429a      	cmp	r2, r3
 800494c:	d20b      	bcs.n	8004966 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d211      	bcs.n	800497c <vTaskDelayUntil+0xb0>
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	429a      	cmp	r2, r3
 800495e:	d90d      	bls.n	800497c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	e00a      	b.n	800497c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	429a      	cmp	r2, r3
 800496e:	d303      	bcc.n	8004978 <vTaskDelayUntil+0xac>
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	429a      	cmp	r2, r3
 8004976:	d901      	bls.n	800497c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004978:	2301      	movs	r3, #1
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fd21 	bl	80053d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004996:	f000 f8bf 	bl	8004b18 <xTaskResumeAll>
 800499a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <vTaskDelayUntil+0xf8>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b2:	bf00      	nop
 80049b4:	3728      	adds	r7, #40	; 0x28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000e24 	.word	0x20000e24
 80049c0:	20000e00 	.word	0x20000e00
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d017      	beq.n	8004a0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <vTaskDelay+0x60>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <vTaskDelay+0x30>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	60bb      	str	r3, [r7, #8]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049f8:	f000 f880 	bl	8004afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049fc:	2100      	movs	r1, #0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fcea 	bl	80053d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a04:	f000 f888 	bl	8004b18 <xTaskResumeAll>
 8004a08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <vTaskDelay+0x64>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000e24 	.word	0x20000e24
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a3e:	463a      	mov	r2, r7
 8004a40:	1d39      	adds	r1, r7, #4
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe ffca 	bl	80039e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	9202      	str	r2, [sp, #8]
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	4921      	ldr	r1, [pc, #132]	; (8004ae4 <vTaskStartScheduler+0xb4>)
 8004a60:	4821      	ldr	r0, [pc, #132]	; (8004ae8 <vTaskStartScheduler+0xb8>)
 8004a62:	f7ff fd91 	bl	8004588 <xTaskCreateStatic>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4a20      	ldr	r2, [pc, #128]	; (8004aec <vTaskStartScheduler+0xbc>)
 8004a6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	; (8004aec <vTaskStartScheduler+0xbc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e001      	b.n	8004a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a84:	f000 fcfc 	bl	8005480 <xTimerCreateTimerTask>
 8004a88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d116      	bne.n	8004abe <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	613b      	str	r3, [r7, #16]
}
 8004aa2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <vTaskStartScheduler+0xc0>)
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <vTaskStartScheduler+0xc4>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <vTaskStartScheduler+0xc8>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ab8:	f001 f8ba 	bl	8005c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004abc:	e00e      	b.n	8004adc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d10a      	bne.n	8004adc <vTaskStartScheduler+0xac>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60fb      	str	r3, [r7, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vTaskStartScheduler+0xaa>
}
 8004adc:	bf00      	nop
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	08006430 	.word	0x08006430
 8004ae8:	08005115 	.word	0x08005115
 8004aec:	20000e20 	.word	0x20000e20
 8004af0:	20000e1c 	.word	0x20000e1c
 8004af4:	20000e08 	.word	0x20000e08
 8004af8:	20000e00 	.word	0x20000e00

08004afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <vTaskSuspendAll+0x18>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a03      	ldr	r2, [pc, #12]	; (8004b14 <vTaskSuspendAll+0x18>)
 8004b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000e24 	.word	0x20000e24

08004b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <xTaskResumeAll+0x118>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	603b      	str	r3, [r7, #0]
}
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b44:	f001 f916 	bl	8005d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b48:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <xTaskResumeAll+0x118>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <xTaskResumeAll+0x118>)
 8004b50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <xTaskResumeAll+0x118>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d162      	bne.n	8004c20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <xTaskResumeAll+0x11c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d05e      	beq.n	8004c20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b62:	e02f      	b.n	8004bc4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b64:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <xTaskResumeAll+0x120>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3318      	adds	r3, #24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fff3 	bl	8003b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe ffee 	bl	8003b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <xTaskResumeAll+0x124>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d903      	bls.n	8004b94 <xTaskResumeAll+0x7c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <xTaskResumeAll+0x124>)
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <xTaskResumeAll+0x128>)
 8004ba2:	441a      	add	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f7fe ff79 	bl	8003aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <xTaskResumeAll+0x12c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <xTaskResumeAll+0x130>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bc4:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <xTaskResumeAll+0x120>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1cb      	bne.n	8004b64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bd2:	f000 fb55 	bl	8005280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bd6:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <xTaskResumeAll+0x134>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004be2:	f000 f847 	bl	8004c74 <xTaskIncrementTick>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bec:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <xTaskResumeAll+0x130>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f1      	bne.n	8004be2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <xTaskResumeAll+0x134>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <xTaskResumeAll+0x130>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <xTaskResumeAll+0x138>)
 8004c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c20:	f001 f8d8 	bl	8005dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c24:	68bb      	ldr	r3, [r7, #8]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000e24 	.word	0x20000e24
 8004c34:	20000dfc 	.word	0x20000dfc
 8004c38:	20000dbc 	.word	0x20000dbc
 8004c3c:	20000e04 	.word	0x20000e04
 8004c40:	2000092c 	.word	0x2000092c
 8004c44:	20000928 	.word	0x20000928
 8004c48:	20000e10 	.word	0x20000e10
 8004c4c:	20000e0c 	.word	0x20000e0c
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <xTaskGetTickCount+0x1c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c60:	687b      	ldr	r3, [r7, #4]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000e00 	.word	0x20000e00

08004c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c7e:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <xTaskIncrementTick+0x148>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 808f 	bne.w	8004da6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c88:	4b4d      	ldr	r3, [pc, #308]	; (8004dc0 <xTaskIncrementTick+0x14c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c90:	4a4b      	ldr	r2, [pc, #300]	; (8004dc0 <xTaskIncrementTick+0x14c>)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d120      	bne.n	8004cde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c9c:	4b49      	ldr	r3, [pc, #292]	; (8004dc4 <xTaskIncrementTick+0x150>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <xTaskIncrementTick+0x48>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	603b      	str	r3, [r7, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <xTaskIncrementTick+0x46>
 8004cbc:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <xTaskIncrementTick+0x150>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <xTaskIncrementTick+0x154>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3f      	ldr	r2, [pc, #252]	; (8004dc4 <xTaskIncrementTick+0x150>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <xTaskIncrementTick+0x154>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <xTaskIncrementTick+0x158>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	4a3d      	ldr	r2, [pc, #244]	; (8004dcc <xTaskIncrementTick+0x158>)
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	f000 fad1 	bl	8005280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cde:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <xTaskIncrementTick+0x15c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d349      	bcc.n	8004d7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <xTaskIncrementTick+0x150>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf2:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <xTaskIncrementTick+0x15c>)
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	601a      	str	r2, [r3, #0]
					break;
 8004cfa:	e03f      	b.n	8004d7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <xTaskIncrementTick+0x150>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d203      	bcs.n	8004d1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d14:	4a2e      	ldr	r2, [pc, #184]	; (8004dd0 <xTaskIncrementTick+0x15c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d1a:	e02f      	b.n	8004d7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe ff1b 	bl	8003b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3318      	adds	r3, #24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe ff12 	bl	8003b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3c:	4b25      	ldr	r3, [pc, #148]	; (8004dd4 <xTaskIncrementTick+0x160>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d903      	bls.n	8004d4c <xTaskIncrementTick+0xd8>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <xTaskIncrementTick+0x160>)
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <xTaskIncrementTick+0x164>)
 8004d5a:	441a      	add	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fe fe9d 	bl	8003aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <xTaskIncrementTick+0x168>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d3b8      	bcc.n	8004ce8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d7a:	e7b5      	b.n	8004ce8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <xTaskIncrementTick+0x168>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d82:	4915      	ldr	r1, [pc, #84]	; (8004dd8 <xTaskIncrementTick+0x164>)
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d901      	bls.n	8004d98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <xTaskIncrementTick+0x16c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e004      	b.n	8004db0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <xTaskIncrementTick+0x170>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3301      	adds	r3, #1
 8004dac:	4a0d      	ldr	r2, [pc, #52]	; (8004de4 <xTaskIncrementTick+0x170>)
 8004dae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004db0:	697b      	ldr	r3, [r7, #20]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000e24 	.word	0x20000e24
 8004dc0:	20000e00 	.word	0x20000e00
 8004dc4:	20000db4 	.word	0x20000db4
 8004dc8:	20000db8 	.word	0x20000db8
 8004dcc:	20000e14 	.word	0x20000e14
 8004dd0:	20000e1c 	.word	0x20000e1c
 8004dd4:	20000e04 	.word	0x20000e04
 8004dd8:	2000092c 	.word	0x2000092c
 8004ddc:	20000928 	.word	0x20000928
 8004de0:	20000e10 	.word	0x20000e10
 8004de4:	20000e0c 	.word	0x20000e0c

08004de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dee:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <vTaskSwitchContext+0xa8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <vTaskSwitchContext+0xac>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dfc:	e041      	b.n	8004e82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004dfe:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <vTaskSwitchContext+0xac>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <vTaskSwitchContext+0xb0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e010      	b.n	8004e2e <vTaskSwitchContext+0x46>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <vTaskSwitchContext+0x40>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vTaskSwitchContext+0x3e>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	491b      	ldr	r1, [pc, #108]	; (8004e9c <vTaskSwitchContext+0xb4>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0e4      	beq.n	8004e0c <vTaskSwitchContext+0x24>
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <vTaskSwitchContext+0xb4>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3308      	adds	r3, #8
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d104      	bne.n	8004e72 <vTaskSwitchContext+0x8a>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <vTaskSwitchContext+0xb8>)
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4a06      	ldr	r2, [pc, #24]	; (8004e98 <vTaskSwitchContext+0xb0>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000e24 	.word	0x20000e24
 8004e94:	20000e10 	.word	0x20000e10
 8004e98:	20000e04 	.word	0x20000e04
 8004e9c:	2000092c 	.word	0x2000092c
 8004ea0:	20000928 	.word	0x20000928

08004ea4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60fb      	str	r3, [r7, #12]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <vTaskPlaceOnEventList+0x44>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3318      	adds	r3, #24
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe fe09 	bl	8003aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ed8:	2101      	movs	r1, #1
 8004eda:	6838      	ldr	r0, [r7, #0]
 8004edc:	f000 fa7c 	bl	80053d8 <prvAddCurrentTaskToDelayedList>
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000928 	.word	0x20000928

08004eec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	617b      	str	r3, [r7, #20]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3318      	adds	r3, #24
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7fe fdc0 	bl	8003aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	f000 fa51 	bl	80053d8 <prvAddCurrentTaskToDelayedList>
	}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000928 	.word	0x20000928

08004f44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60fb      	str	r3, [r7, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3318      	adds	r3, #24
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fe fdf1 	bl	8003b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <xTaskRemoveFromEventList+0xb0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11d      	bne.n	8004fbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fde8 	bl	8003b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <xTaskRemoveFromEventList+0xb4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d903      	bls.n	8004fa0 <xTaskRemoveFromEventList+0x5c>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <xTaskRemoveFromEventList+0xb4>)
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <xTaskRemoveFromEventList+0xb8>)
 8004fae:	441a      	add	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7fe fd73 	bl	8003aa2 <vListInsertEnd>
 8004fbc:	e005      	b.n	8004fca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3318      	adds	r3, #24
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	480e      	ldr	r0, [pc, #56]	; (8005000 <xTaskRemoveFromEventList+0xbc>)
 8004fc6:	f7fe fd6c 	bl	8003aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <xTaskRemoveFromEventList+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d905      	bls.n	8004fe4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <xTaskRemoveFromEventList+0xc4>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e001      	b.n	8004fe8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fe8:	697b      	ldr	r3, [r7, #20]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000e24 	.word	0x20000e24
 8004ff8:	20000e04 	.word	0x20000e04
 8004ffc:	2000092c 	.word	0x2000092c
 8005000:	20000dbc 	.word	0x20000dbc
 8005004:	20000928 	.word	0x20000928
 8005008:	20000e10 	.word	0x20000e10

0800500c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <vTaskInternalSetTimeOutState+0x24>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <vTaskInternalSetTimeOutState+0x28>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000e14 	.word	0x20000e14
 8005034:	20000e00 	.word	0x20000e00

08005038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	613b      	str	r3, [r7, #16]
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	60fb      	str	r3, [r7, #12]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800507a:	f000 fe7b 	bl	8005d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800507e:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <xTaskCheckForTimeOut+0xbc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d102      	bne.n	800509e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	e023      	b.n	80050e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <xTaskCheckForTimeOut+0xc0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d007      	beq.n	80050ba <xTaskCheckForTimeOut+0x82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e015      	b.n	80050e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d20b      	bcs.n	80050dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff9b 	bl	800500c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	e004      	b.n	80050e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050e6:	f000 fe75 	bl	8005dd4 <vPortExitCritical>

	return xReturn;
 80050ea:	69fb      	ldr	r3, [r7, #28]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000e00 	.word	0x20000e00
 80050f8:	20000e14 	.word	0x20000e14

080050fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <vTaskMissedYield+0x14>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	20000e10 	.word	0x20000e10

08005114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800511c:	f000 f852 	bl	80051c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <prvIdleTask+0x28>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d9f9      	bls.n	800511c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <prvIdleTask+0x2c>)
 800512a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005138:	e7f0      	b.n	800511c <prvIdleTask+0x8>
 800513a:	bf00      	nop
 800513c:	2000092c 	.word	0x2000092c
 8005140:	e000ed04 	.word	0xe000ed04

08005144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e00c      	b.n	800516a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <prvInitialiseTaskLists+0x60>)
 800515c:	4413      	add	r3, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fc72 	bl	8003a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3301      	adds	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b37      	cmp	r3, #55	; 0x37
 800516e:	d9ef      	bls.n	8005150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005170:	480d      	ldr	r0, [pc, #52]	; (80051a8 <prvInitialiseTaskLists+0x64>)
 8005172:	f7fe fc69 	bl	8003a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005176:	480d      	ldr	r0, [pc, #52]	; (80051ac <prvInitialiseTaskLists+0x68>)
 8005178:	f7fe fc66 	bl	8003a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800517c:	480c      	ldr	r0, [pc, #48]	; (80051b0 <prvInitialiseTaskLists+0x6c>)
 800517e:	f7fe fc63 	bl	8003a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005182:	480c      	ldr	r0, [pc, #48]	; (80051b4 <prvInitialiseTaskLists+0x70>)
 8005184:	f7fe fc60 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005188:	480b      	ldr	r0, [pc, #44]	; (80051b8 <prvInitialiseTaskLists+0x74>)
 800518a:	f7fe fc5d 	bl	8003a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <prvInitialiseTaskLists+0x78>)
 8005190:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <prvInitialiseTaskLists+0x64>)
 8005192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <prvInitialiseTaskLists+0x7c>)
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <prvInitialiseTaskLists+0x68>)
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000092c 	.word	0x2000092c
 80051a8:	20000d8c 	.word	0x20000d8c
 80051ac:	20000da0 	.word	0x20000da0
 80051b0:	20000dbc 	.word	0x20000dbc
 80051b4:	20000dd0 	.word	0x20000dd0
 80051b8:	20000de8 	.word	0x20000de8
 80051bc:	20000db4 	.word	0x20000db4
 80051c0:	20000db8 	.word	0x20000db8

080051c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ca:	e019      	b.n	8005200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051cc:	f000 fdd2 	bl	8005d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <prvCheckTasksWaitingTermination+0x50>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fcbd 	bl	8003b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <prvCheckTasksWaitingTermination+0x54>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <prvCheckTasksWaitingTermination+0x54>)
 80051ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <prvCheckTasksWaitingTermination+0x58>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <prvCheckTasksWaitingTermination+0x58>)
 80051f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051f6:	f000 fded 	bl	8005dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f810 	bl	8005220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <prvCheckTasksWaitingTermination+0x58>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e1      	bne.n	80051cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000dd0 	.word	0x20000dd0
 8005218:	20000dfc 	.word	0x20000dfc
 800521c:	20000de4 	.word	0x20000de4

08005220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff8a 	bl	8006150 <vPortFree>
				vPortFree( pxTCB );
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 ff87 	bl	8006150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005242:	e018      	b.n	8005276 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800524a:	2b01      	cmp	r3, #1
 800524c:	d103      	bne.n	8005256 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 ff7e 	bl	8006150 <vPortFree>
	}
 8005254:	e00f      	b.n	8005276 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800525c:	2b02      	cmp	r3, #2
 800525e:	d00a      	beq.n	8005276 <prvDeleteTCB+0x56>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60fb      	str	r3, [r7, #12]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <prvDeleteTCB+0x54>
	}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <prvResetNextTaskUnblockTime+0x38>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <prvResetNextTaskUnblockTime+0x3c>)
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005298:	e008      	b.n	80052ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <prvResetNextTaskUnblockTime+0x38>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a04      	ldr	r2, [pc, #16]	; (80052bc <prvResetNextTaskUnblockTime+0x3c>)
 80052aa:	6013      	str	r3, [r2, #0]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000db4 	.word	0x20000db4
 80052bc:	20000e1c 	.word	0x20000e1c

080052c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <xTaskGetSchedulerState+0x34>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052ce:	2301      	movs	r3, #1
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	e008      	b.n	80052e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d4:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <xTaskGetSchedulerState+0x38>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052dc:	2302      	movs	r3, #2
 80052de:	607b      	str	r3, [r7, #4]
 80052e0:	e001      	b.n	80052e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052e6:	687b      	ldr	r3, [r7, #4]
	}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000e08 	.word	0x20000e08
 80052f8:	20000e24 	.word	0x20000e24

080052fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d056      	beq.n	80053c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005312:	4b2e      	ldr	r3, [pc, #184]	; (80053cc <xTaskPriorityDisinherit+0xd0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d00a      	beq.n	8005332 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60bb      	str	r3, [r7, #8]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	1e5a      	subs	r2, r3, #1
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	429a      	cmp	r2, r3
 8005364:	d02c      	beq.n	80053c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536a:	2b00      	cmp	r3, #0
 800536c:	d128      	bne.n	80053c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3304      	adds	r3, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fbf2 	bl	8003b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <xTaskPriorityDisinherit+0xd4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d903      	bls.n	80053a0 <xTaskPriorityDisinherit+0xa4>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a0c      	ldr	r2, [pc, #48]	; (80053d0 <xTaskPriorityDisinherit+0xd4>)
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <xTaskPriorityDisinherit+0xd8>)
 80053ae:	441a      	add	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f7fe fb73 	bl	8003aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053c0:	697b      	ldr	r3, [r7, #20]
	}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000928 	.word	0x20000928
 80053d0:	20000e04 	.word	0x20000e04
 80053d4:	2000092c 	.word	0x2000092c

080053d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <prvAddCurrentTaskToDelayedList+0x90>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <prvAddCurrentTaskToDelayedList+0x94>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fbb4 	bl	8003b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d10a      	bne.n	8005412 <prvAddCurrentTaskToDelayedList+0x3a>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <prvAddCurrentTaskToDelayedList+0x94>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4819      	ldr	r0, [pc, #100]	; (8005470 <prvAddCurrentTaskToDelayedList+0x98>)
 800540c:	f7fe fb49 	bl	8003aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005410:	e026      	b.n	8005460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800541a:	4b14      	ldr	r3, [pc, #80]	; (800546c <prvAddCurrentTaskToDelayedList+0x94>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	429a      	cmp	r2, r3
 8005428:	d209      	bcs.n	800543e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <prvAddCurrentTaskToDelayedList+0x94>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fb57 	bl	8003aea <vListInsert>
}
 800543c:	e010      	b.n	8005460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <prvAddCurrentTaskToDelayedList+0x94>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7fe fb4d 	bl	8003aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d202      	bcs.n	8005460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <prvAddCurrentTaskToDelayedList+0xa4>)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6013      	str	r3, [r2, #0]
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000e00 	.word	0x20000e00
 800546c:	20000928 	.word	0x20000928
 8005470:	20000de8 	.word	0x20000de8
 8005474:	20000db8 	.word	0x20000db8
 8005478:	20000db4 	.word	0x20000db4
 800547c:	20000e1c 	.word	0x20000e1c

08005480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800548a:	f000 fb07 	bl	8005a9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800548e:	4b1c      	ldr	r3, [pc, #112]	; (8005500 <xTimerCreateTimerTask+0x80>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d021      	beq.n	80054da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800549e:	1d3a      	adds	r2, r7, #4
 80054a0:	f107 0108 	add.w	r1, r7, #8
 80054a4:	f107 030c 	add.w	r3, r7, #12
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fab3 	bl	8003a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	9202      	str	r2, [sp, #8]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	2302      	movs	r3, #2
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	460a      	mov	r2, r1
 80054c0:	4910      	ldr	r1, [pc, #64]	; (8005504 <xTimerCreateTimerTask+0x84>)
 80054c2:	4811      	ldr	r0, [pc, #68]	; (8005508 <xTimerCreateTimerTask+0x88>)
 80054c4:	f7ff f860 	bl	8004588 <xTaskCreateStatic>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <xTimerCreateTimerTask+0x8c>)
 80054cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <xTimerCreateTimerTask+0x8c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054d6:	2301      	movs	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000e58 	.word	0x20000e58
 8005504:	08006438 	.word	0x08006438
 8005508:	08005645 	.word	0x08005645
 800550c:	20000e5c 	.word	0x20000e5c

08005510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	623b      	str	r3, [r7, #32]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800553e:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <xTimerGenericCommand+0x98>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d02a      	beq.n	800559c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b05      	cmp	r3, #5
 8005556:	dc18      	bgt.n	800558a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005558:	f7ff feb2 	bl	80052c0 <xTaskGetSchedulerState>
 800555c:	4603      	mov	r3, r0
 800555e:	2b02      	cmp	r3, #2
 8005560:	d109      	bne.n	8005576 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005562:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <xTimerGenericCommand+0x98>)
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	f107 0110 	add.w	r1, r7, #16
 800556a:	2300      	movs	r3, #0
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	f7fe fc23 	bl	8003db8 <xQueueGenericSend>
 8005572:	6278      	str	r0, [r7, #36]	; 0x24
 8005574:	e012      	b.n	800559c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <xTimerGenericCommand+0x98>)
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	f107 0110 	add.w	r1, r7, #16
 800557e:	2300      	movs	r3, #0
 8005580:	2200      	movs	r2, #0
 8005582:	f7fe fc19 	bl	8003db8 <xQueueGenericSend>
 8005586:	6278      	str	r0, [r7, #36]	; 0x24
 8005588:	e008      	b.n	800559c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <xTimerGenericCommand+0x98>)
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f107 0110 	add.w	r1, r7, #16
 8005592:	2300      	movs	r3, #0
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	f7fe fd0d 	bl	8003fb4 <xQueueGenericSendFromISR>
 800559a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000e58 	.word	0x20000e58

080055ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <prvProcessExpiredTimer+0x94>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe fac9 	bl	8003b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d022      	beq.n	800561e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	18d1      	adds	r1, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f000 f8d1 	bl	800578c <prvInsertTimerInActiveList>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01f      	beq.n	8005630 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055f0:	2300      	movs	r3, #0
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	2100      	movs	r1, #0
 80055fa:	6978      	ldr	r0, [r7, #20]
 80055fc:	f7ff ff88 	bl	8005510 <xTimerGenericCommand>
 8005600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d113      	bne.n	8005630 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	60fb      	str	r3, [r7, #12]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	b2da      	uxtb	r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	6978      	ldr	r0, [r7, #20]
 8005636:	4798      	blx	r3
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000e50 	.word	0x20000e50

08005644 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f857 	bl	8005704 <prvGetNextExpireTime>
 8005656:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4619      	mov	r1, r3
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f803 	bl	8005668 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005662:	f000 f8d5 	bl	8005810 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005666:	e7f1      	b.n	800564c <prvTimerTask+0x8>

08005668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005672:	f7ff fa43 	bl	8004afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f866 	bl	800574c <prvSampleTimeNow>
 8005680:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d130      	bne.n	80056ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <prvProcessTimerOrBlockTask+0x3c>
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	429a      	cmp	r2, r3
 8005694:	d806      	bhi.n	80056a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005696:	f7ff fa3f 	bl	8004b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff85 	bl	80055ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056a2:	e024      	b.n	80056ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056aa:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <prvProcessTimerOrBlockTask+0x90>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <prvProcessTimerOrBlockTask+0x50>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <prvProcessTimerOrBlockTask+0x52>
 80056b8:	2300      	movs	r3, #0
 80056ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <prvProcessTimerOrBlockTask+0x94>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f7fe ff29 	bl	8004520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056ce:	f7ff fa23 	bl	8004b18 <xTaskResumeAll>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <prvProcessTimerOrBlockTask+0x98>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
}
 80056e8:	e001      	b.n	80056ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ea:	f7ff fa15 	bl	8004b18 <xTaskResumeAll>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000e54 	.word	0x20000e54
 80056fc:	20000e58 	.word	0x20000e58
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <prvGetNextExpireTime+0x44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <prvGetNextExpireTime+0x16>
 8005716:	2201      	movs	r2, #1
 8005718:	e000      	b.n	800571c <prvGetNextExpireTime+0x18>
 800571a:	2200      	movs	r2, #0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <prvGetNextExpireTime+0x44>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e001      	b.n	8005738 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000e50 	.word	0x20000e50

0800574c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005754:	f7ff fa7e 	bl	8004c54 <xTaskGetTickCount>
 8005758:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800575a:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <prvSampleTimeNow+0x3c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	429a      	cmp	r2, r3
 8005762:	d205      	bcs.n	8005770 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005764:	f000 f936 	bl	80059d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e002      	b.n	8005776 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005776:	4a04      	ldr	r2, [pc, #16]	; (8005788 <prvSampleTimeNow+0x3c>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000e60 	.word	0x20000e60

0800578c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d812      	bhi.n	80057d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad2      	subs	r2, r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e01b      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <prvInsertTimerInActiveList+0x7c>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fe f98a 	bl	8003aea <vListInsert>
 80057d6:	e012      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d206      	bcs.n	80057ee <prvInsertTimerInActiveList+0x62>
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e007      	b.n	80057fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <prvInsertTimerInActiveList+0x80>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe f976 	bl	8003aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000e54 	.word	0x20000e54
 800580c:	20000e50 	.word	0x20000e50

08005810 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	; 0x38
 8005814:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005816:	e0ca      	b.n	80059ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	da18      	bge.n	8005850 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	3304      	adds	r3, #4
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	61fb      	str	r3, [r7, #28]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005846:	6850      	ldr	r0, [r2, #4]
 8005848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	4611      	mov	r1, r2
 800584e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f2c0 80ab 	blt.w	80059ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	3304      	adds	r3, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe f977 	bl	8003b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800586e:	463b      	mov	r3, r7
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff6b 	bl	800574c <prvSampleTimeNow>
 8005876:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b09      	cmp	r3, #9
 800587c:	f200 8096 	bhi.w	80059ac <prvProcessReceivedCommands+0x19c>
 8005880:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <prvProcessReceivedCommands+0x78>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058b1 	.word	0x080058b1
 8005894:	08005925 	.word	0x08005925
 8005898:	08005939 	.word	0x08005939
 800589c:	08005983 	.word	0x08005983
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058b1 	.word	0x080058b1
 80058a8:	08005925 	.word	0x08005925
 80058ac:	08005939 	.word	0x08005939
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	18d1      	adds	r1, r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f7ff ff5c 	bl	800578c <prvInsertTimerInActiveList>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d069      	beq.n	80059ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05e      	beq.n	80059ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	441a      	add	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f7ff fe05 	bl	8005510 <xTimerGenericCommand>
 8005906:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d14f      	bne.n	80059ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61bb      	str	r3, [r7, #24]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800592a:	f023 0301 	bic.w	r3, r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005936:	e03a      	b.n	80059ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	617b      	str	r3, [r7, #20]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	18d1      	adds	r1, r2, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597c:	f7ff ff06 	bl	800578c <prvInsertTimerInActiveList>
					break;
 8005980:	e015      	b.n	80059ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005992:	f000 fbdd 	bl	8006150 <vPortFree>
 8005996:	e00a      	b.n	80059ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059aa:	e000      	b.n	80059ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80059ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <prvProcessReceivedCommands+0x1c0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1d39      	adds	r1, r7, #4
 80059b4:	2200      	movs	r2, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fb98 	bl	80040ec <xQueueReceive>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f47f af2a 	bne.w	8005818 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3730      	adds	r7, #48	; 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000e58 	.word	0x20000e58

080059d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059da:	e048      	b.n	8005a6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059dc:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e6:	4b2b      	ldr	r3, [pc, #172]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe f8b1 	bl	8003b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02e      	beq.n	8005a6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4413      	add	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d90e      	bls.n	8005a40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a2e:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fe f856 	bl	8003aea <vListInsert>
 8005a3e:	e016      	b.n	8005a6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a40:	2300      	movs	r3, #0
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fd60 	bl	8005510 <xTimerGenericCommand>
 8005a50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	603b      	str	r3, [r7, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1b1      	bne.n	80059dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <prvSwitchTimerLists+0xc4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <prvSwitchTimerLists+0xc0>)
 8005a84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a86:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <prvSwitchTimerLists+0xc4>)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000e50 	.word	0x20000e50
 8005a98:	20000e54 	.word	0x20000e54

08005a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aa2:	f000 f967 	bl	8005d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <prvCheckForValidListAndQueue+0x60>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d120      	bne.n	8005af0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005aae:	4814      	ldr	r0, [pc, #80]	; (8005b00 <prvCheckForValidListAndQueue+0x64>)
 8005ab0:	f7fd ffca 	bl	8003a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <prvCheckForValidListAndQueue+0x68>)
 8005ab6:	f7fd ffc7 	bl	8003a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <prvCheckForValidListAndQueue+0x6c>)
 8005abc:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <prvCheckForValidListAndQueue+0x64>)
 8005abe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <prvCheckForValidListAndQueue+0x70>)
 8005ac2:	4a10      	ldr	r2, [pc, #64]	; (8005b04 <prvCheckForValidListAndQueue+0x68>)
 8005ac4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <prvCheckForValidListAndQueue+0x74>)
 8005acc:	4a11      	ldr	r2, [pc, #68]	; (8005b14 <prvCheckForValidListAndQueue+0x78>)
 8005ace:	2110      	movs	r1, #16
 8005ad0:	200a      	movs	r0, #10
 8005ad2:	f7fe f8d5 	bl	8003c80 <xQueueGenericCreateStatic>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <prvCheckForValidListAndQueue+0x60>)
 8005ada:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005adc:	4b07      	ldr	r3, [pc, #28]	; (8005afc <prvCheckForValidListAndQueue+0x60>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <prvCheckForValidListAndQueue+0x60>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	490b      	ldr	r1, [pc, #44]	; (8005b18 <prvCheckForValidListAndQueue+0x7c>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fcee 	bl	80044cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005af0:	f000 f970 	bl	8005dd4 <vPortExitCritical>
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000e58 	.word	0x20000e58
 8005b00:	20000e28 	.word	0x20000e28
 8005b04:	20000e3c 	.word	0x20000e3c
 8005b08:	20000e50 	.word	0x20000e50
 8005b0c:	20000e54 	.word	0x20000e54
 8005b10:	20000f04 	.word	0x20000f04
 8005b14:	20000e64 	.word	0x20000e64
 8005b18:	08006440 	.word	0x08006440

08005b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b04      	subs	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b04      	subs	r3, #4
 8005b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b04      	subs	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b4c:	4a0c      	ldr	r2, [pc, #48]	; (8005b80 <pxPortInitialiseStack+0x64>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3b14      	subs	r3, #20
 8005b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f06f 0202 	mvn.w	r2, #2
 8005b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3b20      	subs	r3, #32
 8005b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	08005b85 	.word	0x08005b85

08005b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <prvTaskExitError+0x54>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d00a      	beq.n	8005bae <prvTaskExitError+0x2a>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60fb      	str	r3, [r7, #12]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <prvTaskExitError+0x28>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
}
 8005bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bc2:	bf00      	nop
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0fc      	beq.n	8005bc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bca:	bf00      	nop
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	2000000c 	.word	0x2000000c
 8005bdc:	00000000 	.word	0x00000000

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <pxCurrentTCBConst2>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	f380 8809 	msr	PSP, r0
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8811 	msr	BASEPRI, r0
 8005bfa:	4770      	bx	lr
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst2>:
 8005c00:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c08:	4808      	ldr	r0, [pc, #32]	; (8005c2c <prvPortStartFirstTask+0x24>)
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f380 8808 	msr	MSP, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8814 	msr	CONTROL, r0
 8005c1a:	b662      	cpsie	i
 8005c1c:	b661      	cpsie	f
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	df00      	svc	0
 8005c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed08 	.word	0xe000ed08

08005c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <xPortStartScheduler+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x26>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <xPortStartScheduler+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10a      	bne.n	8005c76 <xPortStartScheduler+0x46>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xPortStartScheduler+0x12c>)
 8005c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xPortStartScheduler+0x130>)
 8005c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca4:	e009      	b.n	8005cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d0ef      	beq.n	8005ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0307 	rsb	r3, r3, #7
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00a      	beq.n	8005ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d1e:	f000 f8dd 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xPortStartScheduler+0x13c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d28:	f000 f8fc 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d38:	f7ff ff66 	bl	8005c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d3c:	f7ff f854 	bl	8004de8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d40:	f7ff ff20 	bl	8005b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	410fc271 	.word	0x410fc271
 8005d58:	410fc270 	.word	0x410fc270
 8005d5c:	e000e400 	.word	0xe000e400
 8005d60:	20000f54 	.word	0x20000f54
 8005d64:	20000f58 	.word	0x20000f58
 8005d68:	e000ed20 	.word	0xe000ed20
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	e000ef34 	.word	0xe000ef34

08005d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortEnterCritical+0x5c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortEnterCritical+0x4a>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vPortExitCritical+0x50>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortExitCritical+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <vPortExitCritical+0x50>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <vPortExitCritical+0x50>)
 8005e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <vPortExitCritical+0x42>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f383 8811 	msr	BASEPRI, r3
}
 8005e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000000c 	.word	0x2000000c
	...

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	f380 8811 	msr	BASEPRI, r0
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f7fe ffc2 	bl	8004de8 <vTaskSwitchContext>
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f380 8811 	msr	BASEPRI, r0
 8005e6c:	bc09      	pop	{r0, r3}
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f01e 0f10 	tst.w	lr, #16
 8005e7a:	bf08      	it	eq
 8005e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e80:	f380 8809 	msr	PSP, r0
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst>:
 8005e90:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb2:	f7fe fedf 	bl	8004c74 <xTaskIncrementTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <xPortSysTickHandler+0x40>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
}
 8005ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d914      	bls.n	8005f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <vPortValidateInterruptPriority+0x70>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <vPortValidateInterruptPriority+0x74>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20a      	bcs.n	8005f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <vPortValidateInterruptPriority+0x78>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <vPortValidateInterruptPriority+0x7c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d90a      	bls.n	8005f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	603b      	str	r3, [r7, #0]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <vPortValidateInterruptPriority+0x60>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e3f0 	.word	0xe000e3f0
 8005fac:	20000f54 	.word	0x20000f54
 8005fb0:	e000ed0c 	.word	0xe000ed0c
 8005fb4:	20000f58 	.word	0x20000f58

08005fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc4:	f7fe fd9a 	bl	8004afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc8:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <pvPortMalloc+0x180>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd0:	f000 f920 	bl	8006214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd4:	4b59      	ldr	r3, [pc, #356]	; (800613c <pvPortMalloc+0x184>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 8093 	bne.w	8006108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01d      	beq.n	8006024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <pvPortMalloc+0x6c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06e      	beq.n	8006108 <pvPortMalloc+0x150>
 800602a:	4b45      	ldr	r3, [pc, #276]	; (8006140 <pvPortMalloc+0x188>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d869      	bhi.n	8006108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <pvPortMalloc+0x18c>)
 8006036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <pvPortMalloc+0x18c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800603e:	e004      	b.n	800604a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d903      	bls.n	800605c <pvPortMalloc+0xa4>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f1      	bne.n	8006040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <pvPortMalloc+0x180>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	429a      	cmp	r2, r3
 8006064:	d050      	beq.n	8006108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2208      	movs	r2, #8
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	2308      	movs	r3, #8
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d91f      	bls.n	80060c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <pvPortMalloc+0xf8>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	613b      	str	r3, [r7, #16]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f000 f908 	bl	80062d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <pvPortMalloc+0x188>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <pvPortMalloc+0x188>)
 80060d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <pvPortMalloc+0x188>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <pvPortMalloc+0x190>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d203      	bcs.n	80060ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <pvPortMalloc+0x188>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <pvPortMalloc+0x190>)
 80060e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <pvPortMalloc+0x184>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <pvPortMalloc+0x194>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a11      	ldr	r2, [pc, #68]	; (800614c <pvPortMalloc+0x194>)
 8006106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006108:	f7fe fd06 	bl	8004b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <pvPortMalloc+0x174>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0x172>
	return pvReturn;
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20004b64 	.word	0x20004b64
 800613c:	20004b78 	.word	0x20004b78
 8006140:	20004b68 	.word	0x20004b68
 8006144:	20004b5c 	.word	0x20004b5c
 8006148:	20004b6c 	.word	0x20004b6c
 800614c:	20004b70 	.word	0x20004b70

08006150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d04d      	beq.n	80061fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006162:	2308      	movs	r3, #8
 8006164:	425b      	negs	r3, r3
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <vPortFree+0xb8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vPortFree+0x44>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <vPortFree+0x62>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60bb      	str	r3, [r7, #8]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <vPortFree+0xb8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <vPortFree+0xb8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7fe fc90 	bl	8004afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <vPortFree+0xbc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <vPortFree+0xbc>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f874 	bl	80062d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <vPortFree+0xc0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a06      	ldr	r2, [pc, #24]	; (8006210 <vPortFree+0xc0>)
 80061f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061fa:	f7fe fc8d 	bl	8004b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20004b78 	.word	0x20004b78
 800620c:	20004b68 	.word	0x20004b68
 8006210:	20004b74 	.word	0x20004b74

08006214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800621e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <prvHeapInit+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <prvHeapInit+0xac>)
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800624c:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <prvHeapInit+0xb0>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006252:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <prvHeapInit+0xb0>)
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <prvHeapInit+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvHeapInit+0xb4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvHeapInit+0xb4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <prvHeapInit+0xb8>)
 80062a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <prvHeapInit+0xbc>)
 80062aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvHeapInit+0xc0>)
 80062ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000f5c 	.word	0x20000f5c
 80062c4:	20004b5c 	.word	0x20004b5c
 80062c8:	20004b64 	.word	0x20004b64
 80062cc:	20004b6c 	.word	0x20004b6c
 80062d0:	20004b68 	.word	0x20004b68
 80062d4:	20004b78 	.word	0x20004b78

080062d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <prvInsertBlockIntoFreeList+0xac>)
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e002      	b.n	80062ec <prvInsertBlockIntoFreeList+0x14>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d8f7      	bhi.n	80062e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d108      	bne.n	800631a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d118      	bne.n	8006360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d00d      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e008      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e003      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d002      	beq.n	8006376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20004b5c 	.word	0x20004b5c
 8006388:	20004b64 	.word	0x20004b64

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4d0d      	ldr	r5, [pc, #52]	; (80063d4 <__libc_init_array+0x38>)
 80063a0:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a2:	1b64      	subs	r4, r4, r5
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	2600      	movs	r6, #0
 80063a8:	42a6      	cmp	r6, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	4d0b      	ldr	r5, [pc, #44]	; (80063dc <__libc_init_array+0x40>)
 80063ae:	4c0c      	ldr	r4, [pc, #48]	; (80063e0 <__libc_init_array+0x44>)
 80063b0:	f000 f826 	bl	8006400 <_init>
 80063b4:	1b64      	subs	r4, r4, r5
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	2600      	movs	r6, #0
 80063ba:	42a6      	cmp	r6, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c4:	4798      	blx	r3
 80063c6:	3601      	adds	r6, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ce:	4798      	blx	r3
 80063d0:	3601      	adds	r6, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	080064b0 	.word	0x080064b0
 80063d8:	080064b0 	.word	0x080064b0
 80063dc:	080064b0 	.word	0x080064b0
 80063e0:	080064b4 	.word	0x080064b4

080063e4 <memcpy>:
 80063e4:	440a      	add	r2, r1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	4770      	bx	lr
 80063f0:	b510      	push	{r4, lr}
 80063f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fa:	4291      	cmp	r1, r2
 80063fc:	d1f9      	bne.n	80063f2 <memcpy+0xe>
 80063fe:	bd10      	pop	{r4, pc}

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
